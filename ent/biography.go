// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/cateiru/cateiru.com/ent/biography"
)

// Biography is the model entity for the Biography schema.
type Biography struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint32 `json:"user_id,omitempty"`
	// IsPublic holds the value of the "is_public" field.
	IsPublic bool `json:"is_public,omitempty"`
	// LocationID holds the value of the "location_id" field.
	LocationID uint32 `json:"location_id,omitempty"`
	// Position holds the value of the "position" field.
	Position string `json:"position,omitempty"`
	// PositionJa holds the value of the "position_ja" field.
	PositionJa string `json:"position_ja,omitempty"`
	// Join holds the value of the "join" field.
	Join time.Time `json:"join,omitempty"`
	// Leave holds the value of the "leave" field.
	Leave time.Time `json:"leave,omitempty"`
	// Created holds the value of the "created" field.
	Created time.Time `json:"created,omitempty"`
	// Modified holds the value of the "modified" field.
	Modified time.Time `json:"modified,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Biography) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case biography.FieldIsPublic:
			values[i] = new(sql.NullBool)
		case biography.FieldID, biography.FieldUserID, biography.FieldLocationID:
			values[i] = new(sql.NullInt64)
		case biography.FieldPosition, biography.FieldPositionJa:
			values[i] = new(sql.NullString)
		case biography.FieldJoin, biography.FieldLeave, biography.FieldCreated, biography.FieldModified:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Biography", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Biography fields.
func (b *Biography) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case biography.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = uint32(value.Int64)
		case biography.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				b.UserID = uint32(value.Int64)
			}
		case biography.FieldIsPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_public", values[i])
			} else if value.Valid {
				b.IsPublic = value.Bool
			}
		case biography.FieldLocationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field location_id", values[i])
			} else if value.Valid {
				b.LocationID = uint32(value.Int64)
			}
		case biography.FieldPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				b.Position = value.String
			}
		case biography.FieldPositionJa:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position_ja", values[i])
			} else if value.Valid {
				b.PositionJa = value.String
			}
		case biography.FieldJoin:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field join", values[i])
			} else if value.Valid {
				b.Join = value.Time
			}
		case biography.FieldLeave:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field leave", values[i])
			} else if value.Valid {
				b.Leave = value.Time
			}
		case biography.FieldCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created", values[i])
			} else if value.Valid {
				b.Created = value.Time
			}
		case biography.FieldModified:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modified", values[i])
			} else if value.Valid {
				b.Modified = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Biography.
// Note that you need to call Biography.Unwrap() before calling this method if this Biography
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Biography) Update() *BiographyUpdateOne {
	return (&BiographyClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Biography entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Biography) Unwrap() *Biography {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Biography is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Biography) String() string {
	var builder strings.Builder
	builder.WriteString("Biography(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", b.UserID))
	builder.WriteString(", ")
	builder.WriteString("is_public=")
	builder.WriteString(fmt.Sprintf("%v", b.IsPublic))
	builder.WriteString(", ")
	builder.WriteString("location_id=")
	builder.WriteString(fmt.Sprintf("%v", b.LocationID))
	builder.WriteString(", ")
	builder.WriteString("position=")
	builder.WriteString(b.Position)
	builder.WriteString(", ")
	builder.WriteString("position_ja=")
	builder.WriteString(b.PositionJa)
	builder.WriteString(", ")
	builder.WriteString("join=")
	builder.WriteString(b.Join.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("leave=")
	builder.WriteString(b.Leave.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created=")
	builder.WriteString(b.Created.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("modified=")
	builder.WriteString(b.Modified.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Biographies is a parsable slice of Biography.
type Biographies []*Biography

func (b Biographies) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
