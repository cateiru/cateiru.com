// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cateiru/cateir.com/ent/biography"
)

// BiographyCreate is the builder for creating a Biography entity.
type BiographyCreate struct {
	config
	mutation *BiographyMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (bc *BiographyCreate) SetUserID(u uint32) *BiographyCreate {
	bc.mutation.SetUserID(u)
	return bc
}

// SetIsPublic sets the "is_public" field.
func (bc *BiographyCreate) SetIsPublic(b bool) *BiographyCreate {
	bc.mutation.SetIsPublic(b)
	return bc
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (bc *BiographyCreate) SetNillableIsPublic(b *bool) *BiographyCreate {
	if b != nil {
		bc.SetIsPublic(*b)
	}
	return bc
}

// SetLocationID sets the "location_id" field.
func (bc *BiographyCreate) SetLocationID(u uint32) *BiographyCreate {
	bc.mutation.SetLocationID(u)
	return bc
}

// SetPosition sets the "position" field.
func (bc *BiographyCreate) SetPosition(s string) *BiographyCreate {
	bc.mutation.SetPosition(s)
	return bc
}

// SetJoin sets the "join" field.
func (bc *BiographyCreate) SetJoin(t time.Time) *BiographyCreate {
	bc.mutation.SetJoin(t)
	return bc
}

// SetLeave sets the "leave" field.
func (bc *BiographyCreate) SetLeave(t time.Time) *BiographyCreate {
	bc.mutation.SetLeave(t)
	return bc
}

// SetCreated sets the "created" field.
func (bc *BiographyCreate) SetCreated(t time.Time) *BiographyCreate {
	bc.mutation.SetCreated(t)
	return bc
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (bc *BiographyCreate) SetNillableCreated(t *time.Time) *BiographyCreate {
	if t != nil {
		bc.SetCreated(*t)
	}
	return bc
}

// SetModified sets the "modified" field.
func (bc *BiographyCreate) SetModified(t time.Time) *BiographyCreate {
	bc.mutation.SetModified(t)
	return bc
}

// SetNillableModified sets the "modified" field if the given value is not nil.
func (bc *BiographyCreate) SetNillableModified(t *time.Time) *BiographyCreate {
	if t != nil {
		bc.SetModified(*t)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BiographyCreate) SetID(u uint32) *BiographyCreate {
	bc.mutation.SetID(u)
	return bc
}

// Mutation returns the BiographyMutation object of the builder.
func (bc *BiographyCreate) Mutation() *BiographyMutation {
	return bc.mutation
}

// Save creates the Biography in the database.
func (bc *BiographyCreate) Save(ctx context.Context) (*Biography, error) {
	var (
		err  error
		node *Biography
	)
	bc.defaults()
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BiographyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			if node, err = bc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			if bc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, bc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Biography)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BiographyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BiographyCreate) SaveX(ctx context.Context) *Biography {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BiographyCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BiographyCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BiographyCreate) defaults() {
	if _, ok := bc.mutation.IsPublic(); !ok {
		v := biography.DefaultIsPublic
		bc.mutation.SetIsPublic(v)
	}
	if _, ok := bc.mutation.Created(); !ok {
		v := biography.DefaultCreated()
		bc.mutation.SetCreated(v)
	}
	if _, ok := bc.mutation.Modified(); !ok {
		v := biography.DefaultModified()
		bc.mutation.SetModified(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BiographyCreate) check() error {
	if _, ok := bc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Biography.user_id"`)}
	}
	if _, ok := bc.mutation.IsPublic(); !ok {
		return &ValidationError{Name: "is_public", err: errors.New(`ent: missing required field "Biography.is_public"`)}
	}
	if _, ok := bc.mutation.LocationID(); !ok {
		return &ValidationError{Name: "location_id", err: errors.New(`ent: missing required field "Biography.location_id"`)}
	}
	if _, ok := bc.mutation.Position(); !ok {
		return &ValidationError{Name: "position", err: errors.New(`ent: missing required field "Biography.position"`)}
	}
	if _, ok := bc.mutation.Join(); !ok {
		return &ValidationError{Name: "join", err: errors.New(`ent: missing required field "Biography.join"`)}
	}
	if _, ok := bc.mutation.Leave(); !ok {
		return &ValidationError{Name: "leave", err: errors.New(`ent: missing required field "Biography.leave"`)}
	}
	if _, ok := bc.mutation.Created(); !ok {
		return &ValidationError{Name: "created", err: errors.New(`ent: missing required field "Biography.created"`)}
	}
	if _, ok := bc.mutation.Modified(); !ok {
		return &ValidationError{Name: "modified", err: errors.New(`ent: missing required field "Biography.modified"`)}
	}
	return nil
}

func (bc *BiographyCreate) sqlSave(ctx context.Context) (*Biography, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (bc *BiographyCreate) createSpec() (*Biography, *sqlgraph.CreateSpec) {
	var (
		_node = &Biography{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: biography.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: biography.FieldID,
			},
		}
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: biography.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := bc.mutation.IsPublic(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: biography.FieldIsPublic,
		})
		_node.IsPublic = value
	}
	if value, ok := bc.mutation.LocationID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: biography.FieldLocationID,
		})
		_node.LocationID = value
	}
	if value, ok := bc.mutation.Position(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biography.FieldPosition,
		})
		_node.Position = value
	}
	if value, ok := bc.mutation.Join(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: biography.FieldJoin,
		})
		_node.Join = value
	}
	if value, ok := bc.mutation.Leave(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: biography.FieldLeave,
		})
		_node.Leave = value
	}
	if value, ok := bc.mutation.Created(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: biography.FieldCreated,
		})
		_node.Created = value
	}
	if value, ok := bc.mutation.Modified(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: biography.FieldModified,
		})
		_node.Modified = value
	}
	return _node, _spec
}

// BiographyCreateBulk is the builder for creating many Biography entities in bulk.
type BiographyCreateBulk struct {
	config
	builders []*BiographyCreate
}

// Save creates the Biography entities in the database.
func (bcb *BiographyCreateBulk) Save(ctx context.Context) ([]*Biography, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Biography, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BiographyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BiographyCreateBulk) SaveX(ctx context.Context) []*Biography {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BiographyCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BiographyCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
