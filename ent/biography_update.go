// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cateiru/cateiru.com/ent/biography"
	"github.com/cateiru/cateiru.com/ent/predicate"
)

// BiographyUpdate is the builder for updating Biography entities.
type BiographyUpdate struct {
	config
	hooks    []Hook
	mutation *BiographyMutation
}

// Where appends a list predicates to the BiographyUpdate builder.
func (bu *BiographyUpdate) Where(ps ...predicate.Biography) *BiographyUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUserID sets the "user_id" field.
func (bu *BiographyUpdate) SetUserID(u uint32) *BiographyUpdate {
	bu.mutation.ResetUserID()
	bu.mutation.SetUserID(u)
	return bu
}

// AddUserID adds u to the "user_id" field.
func (bu *BiographyUpdate) AddUserID(u int32) *BiographyUpdate {
	bu.mutation.AddUserID(u)
	return bu
}

// SetIsPublic sets the "is_public" field.
func (bu *BiographyUpdate) SetIsPublic(b bool) *BiographyUpdate {
	bu.mutation.SetIsPublic(b)
	return bu
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (bu *BiographyUpdate) SetNillableIsPublic(b *bool) *BiographyUpdate {
	if b != nil {
		bu.SetIsPublic(*b)
	}
	return bu
}

// SetLocationID sets the "location_id" field.
func (bu *BiographyUpdate) SetLocationID(u uint32) *BiographyUpdate {
	bu.mutation.ResetLocationID()
	bu.mutation.SetLocationID(u)
	return bu
}

// AddLocationID adds u to the "location_id" field.
func (bu *BiographyUpdate) AddLocationID(u int32) *BiographyUpdate {
	bu.mutation.AddLocationID(u)
	return bu
}

// SetPosition sets the "position" field.
func (bu *BiographyUpdate) SetPosition(s string) *BiographyUpdate {
	bu.mutation.SetPosition(s)
	return bu
}

// SetPositionJa sets the "position_ja" field.
func (bu *BiographyUpdate) SetPositionJa(s string) *BiographyUpdate {
	bu.mutation.SetPositionJa(s)
	return bu
}

// SetJoin sets the "join" field.
func (bu *BiographyUpdate) SetJoin(t time.Time) *BiographyUpdate {
	bu.mutation.SetJoin(t)
	return bu
}

// SetLeave sets the "leave" field.
func (bu *BiographyUpdate) SetLeave(t time.Time) *BiographyUpdate {
	bu.mutation.SetLeave(t)
	return bu
}

// SetNillableLeave sets the "leave" field if the given value is not nil.
func (bu *BiographyUpdate) SetNillableLeave(t *time.Time) *BiographyUpdate {
	if t != nil {
		bu.SetLeave(*t)
	}
	return bu
}

// ClearLeave clears the value of the "leave" field.
func (bu *BiographyUpdate) ClearLeave() *BiographyUpdate {
	bu.mutation.ClearLeave()
	return bu
}

// SetCreated sets the "created" field.
func (bu *BiographyUpdate) SetCreated(t time.Time) *BiographyUpdate {
	bu.mutation.SetCreated(t)
	return bu
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (bu *BiographyUpdate) SetNillableCreated(t *time.Time) *BiographyUpdate {
	if t != nil {
		bu.SetCreated(*t)
	}
	return bu
}

// SetModified sets the "modified" field.
func (bu *BiographyUpdate) SetModified(t time.Time) *BiographyUpdate {
	bu.mutation.SetModified(t)
	return bu
}

// Mutation returns the BiographyMutation object of the builder.
func (bu *BiographyUpdate) Mutation() *BiographyMutation {
	return bu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BiographyUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks[int, BiographyMutation](ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BiographyUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BiographyUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BiographyUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BiographyUpdate) defaults() {
	if _, ok := bu.mutation.Modified(); !ok {
		v := biography.UpdateDefaultModified()
		bu.mutation.SetModified(v)
	}
}

func (bu *BiographyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(biography.Table, biography.Columns, sqlgraph.NewFieldSpec(biography.FieldID, field.TypeUint32))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.UserID(); ok {
		_spec.SetField(biography.FieldUserID, field.TypeUint32, value)
	}
	if value, ok := bu.mutation.AddedUserID(); ok {
		_spec.AddField(biography.FieldUserID, field.TypeUint32, value)
	}
	if value, ok := bu.mutation.IsPublic(); ok {
		_spec.SetField(biography.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := bu.mutation.LocationID(); ok {
		_spec.SetField(biography.FieldLocationID, field.TypeUint32, value)
	}
	if value, ok := bu.mutation.AddedLocationID(); ok {
		_spec.AddField(biography.FieldLocationID, field.TypeUint32, value)
	}
	if value, ok := bu.mutation.Position(); ok {
		_spec.SetField(biography.FieldPosition, field.TypeString, value)
	}
	if value, ok := bu.mutation.PositionJa(); ok {
		_spec.SetField(biography.FieldPositionJa, field.TypeString, value)
	}
	if value, ok := bu.mutation.Join(); ok {
		_spec.SetField(biography.FieldJoin, field.TypeTime, value)
	}
	if value, ok := bu.mutation.Leave(); ok {
		_spec.SetField(biography.FieldLeave, field.TypeTime, value)
	}
	if bu.mutation.LeaveCleared() {
		_spec.ClearField(biography.FieldLeave, field.TypeTime)
	}
	if value, ok := bu.mutation.Created(); ok {
		_spec.SetField(biography.FieldCreated, field.TypeTime, value)
	}
	if value, ok := bu.mutation.Modified(); ok {
		_spec.SetField(biography.FieldModified, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{biography.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BiographyUpdateOne is the builder for updating a single Biography entity.
type BiographyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BiographyMutation
}

// SetUserID sets the "user_id" field.
func (buo *BiographyUpdateOne) SetUserID(u uint32) *BiographyUpdateOne {
	buo.mutation.ResetUserID()
	buo.mutation.SetUserID(u)
	return buo
}

// AddUserID adds u to the "user_id" field.
func (buo *BiographyUpdateOne) AddUserID(u int32) *BiographyUpdateOne {
	buo.mutation.AddUserID(u)
	return buo
}

// SetIsPublic sets the "is_public" field.
func (buo *BiographyUpdateOne) SetIsPublic(b bool) *BiographyUpdateOne {
	buo.mutation.SetIsPublic(b)
	return buo
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (buo *BiographyUpdateOne) SetNillableIsPublic(b *bool) *BiographyUpdateOne {
	if b != nil {
		buo.SetIsPublic(*b)
	}
	return buo
}

// SetLocationID sets the "location_id" field.
func (buo *BiographyUpdateOne) SetLocationID(u uint32) *BiographyUpdateOne {
	buo.mutation.ResetLocationID()
	buo.mutation.SetLocationID(u)
	return buo
}

// AddLocationID adds u to the "location_id" field.
func (buo *BiographyUpdateOne) AddLocationID(u int32) *BiographyUpdateOne {
	buo.mutation.AddLocationID(u)
	return buo
}

// SetPosition sets the "position" field.
func (buo *BiographyUpdateOne) SetPosition(s string) *BiographyUpdateOne {
	buo.mutation.SetPosition(s)
	return buo
}

// SetPositionJa sets the "position_ja" field.
func (buo *BiographyUpdateOne) SetPositionJa(s string) *BiographyUpdateOne {
	buo.mutation.SetPositionJa(s)
	return buo
}

// SetJoin sets the "join" field.
func (buo *BiographyUpdateOne) SetJoin(t time.Time) *BiographyUpdateOne {
	buo.mutation.SetJoin(t)
	return buo
}

// SetLeave sets the "leave" field.
func (buo *BiographyUpdateOne) SetLeave(t time.Time) *BiographyUpdateOne {
	buo.mutation.SetLeave(t)
	return buo
}

// SetNillableLeave sets the "leave" field if the given value is not nil.
func (buo *BiographyUpdateOne) SetNillableLeave(t *time.Time) *BiographyUpdateOne {
	if t != nil {
		buo.SetLeave(*t)
	}
	return buo
}

// ClearLeave clears the value of the "leave" field.
func (buo *BiographyUpdateOne) ClearLeave() *BiographyUpdateOne {
	buo.mutation.ClearLeave()
	return buo
}

// SetCreated sets the "created" field.
func (buo *BiographyUpdateOne) SetCreated(t time.Time) *BiographyUpdateOne {
	buo.mutation.SetCreated(t)
	return buo
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (buo *BiographyUpdateOne) SetNillableCreated(t *time.Time) *BiographyUpdateOne {
	if t != nil {
		buo.SetCreated(*t)
	}
	return buo
}

// SetModified sets the "modified" field.
func (buo *BiographyUpdateOne) SetModified(t time.Time) *BiographyUpdateOne {
	buo.mutation.SetModified(t)
	return buo
}

// Mutation returns the BiographyMutation object of the builder.
func (buo *BiographyUpdateOne) Mutation() *BiographyMutation {
	return buo.mutation
}

// Where appends a list predicates to the BiographyUpdate builder.
func (buo *BiographyUpdateOne) Where(ps ...predicate.Biography) *BiographyUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BiographyUpdateOne) Select(field string, fields ...string) *BiographyUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Biography entity.
func (buo *BiographyUpdateOne) Save(ctx context.Context) (*Biography, error) {
	buo.defaults()
	return withHooks[*Biography, BiographyMutation](ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BiographyUpdateOne) SaveX(ctx context.Context) *Biography {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BiographyUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BiographyUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BiographyUpdateOne) defaults() {
	if _, ok := buo.mutation.Modified(); !ok {
		v := biography.UpdateDefaultModified()
		buo.mutation.SetModified(v)
	}
}

func (buo *BiographyUpdateOne) sqlSave(ctx context.Context) (_node *Biography, err error) {
	_spec := sqlgraph.NewUpdateSpec(biography.Table, biography.Columns, sqlgraph.NewFieldSpec(biography.FieldID, field.TypeUint32))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Biography.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, biography.FieldID)
		for _, f := range fields {
			if !biography.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != biography.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.UserID(); ok {
		_spec.SetField(biography.FieldUserID, field.TypeUint32, value)
	}
	if value, ok := buo.mutation.AddedUserID(); ok {
		_spec.AddField(biography.FieldUserID, field.TypeUint32, value)
	}
	if value, ok := buo.mutation.IsPublic(); ok {
		_spec.SetField(biography.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := buo.mutation.LocationID(); ok {
		_spec.SetField(biography.FieldLocationID, field.TypeUint32, value)
	}
	if value, ok := buo.mutation.AddedLocationID(); ok {
		_spec.AddField(biography.FieldLocationID, field.TypeUint32, value)
	}
	if value, ok := buo.mutation.Position(); ok {
		_spec.SetField(biography.FieldPosition, field.TypeString, value)
	}
	if value, ok := buo.mutation.PositionJa(); ok {
		_spec.SetField(biography.FieldPositionJa, field.TypeString, value)
	}
	if value, ok := buo.mutation.Join(); ok {
		_spec.SetField(biography.FieldJoin, field.TypeTime, value)
	}
	if value, ok := buo.mutation.Leave(); ok {
		_spec.SetField(biography.FieldLeave, field.TypeTime, value)
	}
	if buo.mutation.LeaveCleared() {
		_spec.ClearField(biography.FieldLeave, field.TypeTime)
	}
	if value, ok := buo.mutation.Created(); ok {
		_spec.SetField(biography.FieldCreated, field.TypeTime, value)
	}
	if value, ok := buo.mutation.Modified(); ok {
		_spec.SetField(biography.FieldModified, field.TypeTime, value)
	}
	_node = &Biography{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{biography.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
