// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cateiru/cateiru.com/ent/contact"
)

// ContactCreate is the builder for creating a Contact entity.
type ContactCreate struct {
	config
	mutation *ContactMutation
	hooks    []Hook
}

// SetToUserID sets the "to_user_id" field.
func (cc *ContactCreate) SetToUserID(u uint32) *ContactCreate {
	cc.mutation.SetToUserID(u)
	return cc
}

// SetName sets the "name" field.
func (cc *ContactCreate) SetName(s string) *ContactCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetTitle sets the "title" field.
func (cc *ContactCreate) SetTitle(s string) *ContactCreate {
	cc.mutation.SetTitle(s)
	return cc
}

// SetDetail sets the "detail" field.
func (cc *ContactCreate) SetDetail(s string) *ContactCreate {
	cc.mutation.SetDetail(s)
	return cc
}

// SetMail sets the "mail" field.
func (cc *ContactCreate) SetMail(s string) *ContactCreate {
	cc.mutation.SetMail(s)
	return cc
}

// SetIP sets the "ip" field.
func (cc *ContactCreate) SetIP(s string) *ContactCreate {
	cc.mutation.SetIP(s)
	return cc
}

// SetLang sets the "lang" field.
func (cc *ContactCreate) SetLang(s string) *ContactCreate {
	cc.mutation.SetLang(s)
	return cc
}

// SetURL sets the "url" field.
func (cc *ContactCreate) SetURL(s string) *ContactCreate {
	cc.mutation.SetURL(s)
	return cc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (cc *ContactCreate) SetNillableURL(s *string) *ContactCreate {
	if s != nil {
		cc.SetURL(*s)
	}
	return cc
}

// SetCategory sets the "category" field.
func (cc *ContactCreate) SetCategory(s string) *ContactCreate {
	cc.mutation.SetCategory(s)
	return cc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (cc *ContactCreate) SetNillableCategory(s *string) *ContactCreate {
	if s != nil {
		cc.SetCategory(*s)
	}
	return cc
}

// SetCustomTitle sets the "custom_title" field.
func (cc *ContactCreate) SetCustomTitle(s string) *ContactCreate {
	cc.mutation.SetCustomTitle(s)
	return cc
}

// SetNillableCustomTitle sets the "custom_title" field if the given value is not nil.
func (cc *ContactCreate) SetNillableCustomTitle(s *string) *ContactCreate {
	if s != nil {
		cc.SetCustomTitle(*s)
	}
	return cc
}

// SetCustomValue sets the "custom_value" field.
func (cc *ContactCreate) SetCustomValue(s string) *ContactCreate {
	cc.mutation.SetCustomValue(s)
	return cc
}

// SetNillableCustomValue sets the "custom_value" field if the given value is not nil.
func (cc *ContactCreate) SetNillableCustomValue(s *string) *ContactCreate {
	if s != nil {
		cc.SetCustomValue(*s)
	}
	return cc
}

// SetDeviceName sets the "device_name" field.
func (cc *ContactCreate) SetDeviceName(s string) *ContactCreate {
	cc.mutation.SetDeviceName(s)
	return cc
}

// SetNillableDeviceName sets the "device_name" field if the given value is not nil.
func (cc *ContactCreate) SetNillableDeviceName(s *string) *ContactCreate {
	if s != nil {
		cc.SetDeviceName(*s)
	}
	return cc
}

// SetOs sets the "os" field.
func (cc *ContactCreate) SetOs(s string) *ContactCreate {
	cc.mutation.SetOs(s)
	return cc
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (cc *ContactCreate) SetNillableOs(s *string) *ContactCreate {
	if s != nil {
		cc.SetOs(*s)
	}
	return cc
}

// SetBrowserName sets the "browser_name" field.
func (cc *ContactCreate) SetBrowserName(s string) *ContactCreate {
	cc.mutation.SetBrowserName(s)
	return cc
}

// SetNillableBrowserName sets the "browser_name" field if the given value is not nil.
func (cc *ContactCreate) SetNillableBrowserName(s *string) *ContactCreate {
	if s != nil {
		cc.SetBrowserName(*s)
	}
	return cc
}

// SetIsMobile sets the "is_mobile" field.
func (cc *ContactCreate) SetIsMobile(b bool) *ContactCreate {
	cc.mutation.SetIsMobile(b)
	return cc
}

// SetNillableIsMobile sets the "is_mobile" field if the given value is not nil.
func (cc *ContactCreate) SetNillableIsMobile(b *bool) *ContactCreate {
	if b != nil {
		cc.SetIsMobile(*b)
	}
	return cc
}

// SetCreated sets the "created" field.
func (cc *ContactCreate) SetCreated(t time.Time) *ContactCreate {
	cc.mutation.SetCreated(t)
	return cc
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (cc *ContactCreate) SetNillableCreated(t *time.Time) *ContactCreate {
	if t != nil {
		cc.SetCreated(*t)
	}
	return cc
}

// SetModified sets the "modified" field.
func (cc *ContactCreate) SetModified(t time.Time) *ContactCreate {
	cc.mutation.SetModified(t)
	return cc
}

// SetNillableModified sets the "modified" field if the given value is not nil.
func (cc *ContactCreate) SetNillableModified(t *time.Time) *ContactCreate {
	if t != nil {
		cc.SetModified(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ContactCreate) SetID(u uint32) *ContactCreate {
	cc.mutation.SetID(u)
	return cc
}

// Mutation returns the ContactMutation object of the builder.
func (cc *ContactCreate) Mutation() *ContactMutation {
	return cc.mutation
}

// Save creates the Contact in the database.
func (cc *ContactCreate) Save(ctx context.Context) (*Contact, error) {
	cc.defaults()
	return withHooks[*Contact, ContactMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ContactCreate) SaveX(ctx context.Context) *Contact {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ContactCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ContactCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ContactCreate) defaults() {
	if _, ok := cc.mutation.Created(); !ok {
		v := contact.DefaultCreated()
		cc.mutation.SetCreated(v)
	}
	if _, ok := cc.mutation.Modified(); !ok {
		v := contact.DefaultModified()
		cc.mutation.SetModified(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ContactCreate) check() error {
	if _, ok := cc.mutation.ToUserID(); !ok {
		return &ValidationError{Name: "to_user_id", err: errors.New(`ent: missing required field "Contact.to_user_id"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Contact.name"`)}
	}
	if _, ok := cc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Contact.title"`)}
	}
	if _, ok := cc.mutation.Detail(); !ok {
		return &ValidationError{Name: "detail", err: errors.New(`ent: missing required field "Contact.detail"`)}
	}
	if _, ok := cc.mutation.Mail(); !ok {
		return &ValidationError{Name: "mail", err: errors.New(`ent: missing required field "Contact.mail"`)}
	}
	if _, ok := cc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "Contact.ip"`)}
	}
	if _, ok := cc.mutation.Lang(); !ok {
		return &ValidationError{Name: "lang", err: errors.New(`ent: missing required field "Contact.lang"`)}
	}
	if _, ok := cc.mutation.Created(); !ok {
		return &ValidationError{Name: "created", err: errors.New(`ent: missing required field "Contact.created"`)}
	}
	if _, ok := cc.mutation.Modified(); !ok {
		return &ValidationError{Name: "modified", err: errors.New(`ent: missing required field "Contact.modified"`)}
	}
	return nil
}

func (cc *ContactCreate) sqlSave(ctx context.Context) (*Contact, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ContactCreate) createSpec() (*Contact, *sqlgraph.CreateSpec) {
	var (
		_node = &Contact{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(contact.Table, sqlgraph.NewFieldSpec(contact.FieldID, field.TypeUint32))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.ToUserID(); ok {
		_spec.SetField(contact.FieldToUserID, field.TypeUint32, value)
		_node.ToUserID = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(contact.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Title(); ok {
		_spec.SetField(contact.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := cc.mutation.Detail(); ok {
		_spec.SetField(contact.FieldDetail, field.TypeString, value)
		_node.Detail = value
	}
	if value, ok := cc.mutation.Mail(); ok {
		_spec.SetField(contact.FieldMail, field.TypeString, value)
		_node.Mail = value
	}
	if value, ok := cc.mutation.IP(); ok {
		_spec.SetField(contact.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := cc.mutation.Lang(); ok {
		_spec.SetField(contact.FieldLang, field.TypeString, value)
		_node.Lang = value
	}
	if value, ok := cc.mutation.URL(); ok {
		_spec.SetField(contact.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := cc.mutation.Category(); ok {
		_spec.SetField(contact.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := cc.mutation.CustomTitle(); ok {
		_spec.SetField(contact.FieldCustomTitle, field.TypeString, value)
		_node.CustomTitle = value
	}
	if value, ok := cc.mutation.CustomValue(); ok {
		_spec.SetField(contact.FieldCustomValue, field.TypeString, value)
		_node.CustomValue = value
	}
	if value, ok := cc.mutation.DeviceName(); ok {
		_spec.SetField(contact.FieldDeviceName, field.TypeString, value)
		_node.DeviceName = value
	}
	if value, ok := cc.mutation.Os(); ok {
		_spec.SetField(contact.FieldOs, field.TypeString, value)
		_node.Os = value
	}
	if value, ok := cc.mutation.BrowserName(); ok {
		_spec.SetField(contact.FieldBrowserName, field.TypeString, value)
		_node.BrowserName = value
	}
	if value, ok := cc.mutation.IsMobile(); ok {
		_spec.SetField(contact.FieldIsMobile, field.TypeBool, value)
		_node.IsMobile = value
	}
	if value, ok := cc.mutation.Created(); ok {
		_spec.SetField(contact.FieldCreated, field.TypeTime, value)
		_node.Created = value
	}
	if value, ok := cc.mutation.Modified(); ok {
		_spec.SetField(contact.FieldModified, field.TypeTime, value)
		_node.Modified = value
	}
	return _node, _spec
}

// ContactCreateBulk is the builder for creating many Contact entities in bulk.
type ContactCreateBulk struct {
	config
	builders []*ContactCreate
}

// Save creates the Contact entities in the database.
func (ccb *ContactCreateBulk) Save(ctx context.Context) ([]*Contact, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Contact, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContactMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ContactCreateBulk) SaveX(ctx context.Context) []*Contact {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ContactCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ContactCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
