// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cateiru/cateiru.com/ent/contact"
	"github.com/cateiru/cateiru.com/ent/predicate"
)

// ContactUpdate is the builder for updating Contact entities.
type ContactUpdate struct {
	config
	hooks    []Hook
	mutation *ContactMutation
}

// Where appends a list predicates to the ContactUpdate builder.
func (cu *ContactUpdate) Where(ps ...predicate.Contact) *ContactUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetToUserID sets the "to_user_id" field.
func (cu *ContactUpdate) SetToUserID(u uint32) *ContactUpdate {
	cu.mutation.ResetToUserID()
	cu.mutation.SetToUserID(u)
	return cu
}

// AddToUserID adds u to the "to_user_id" field.
func (cu *ContactUpdate) AddToUserID(u int32) *ContactUpdate {
	cu.mutation.AddToUserID(u)
	return cu
}

// SetName sets the "name" field.
func (cu *ContactUpdate) SetName(s string) *ContactUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetTitle sets the "title" field.
func (cu *ContactUpdate) SetTitle(s string) *ContactUpdate {
	cu.mutation.SetTitle(s)
	return cu
}

// SetDetail sets the "detail" field.
func (cu *ContactUpdate) SetDetail(s string) *ContactUpdate {
	cu.mutation.SetDetail(s)
	return cu
}

// SetMail sets the "mail" field.
func (cu *ContactUpdate) SetMail(s string) *ContactUpdate {
	cu.mutation.SetMail(s)
	return cu
}

// SetIP sets the "ip" field.
func (cu *ContactUpdate) SetIP(s string) *ContactUpdate {
	cu.mutation.SetIP(s)
	return cu
}

// SetLang sets the "lang" field.
func (cu *ContactUpdate) SetLang(s string) *ContactUpdate {
	cu.mutation.SetLang(s)
	return cu
}

// SetURL sets the "url" field.
func (cu *ContactUpdate) SetURL(s string) *ContactUpdate {
	cu.mutation.SetURL(s)
	return cu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableURL(s *string) *ContactUpdate {
	if s != nil {
		cu.SetURL(*s)
	}
	return cu
}

// ClearURL clears the value of the "url" field.
func (cu *ContactUpdate) ClearURL() *ContactUpdate {
	cu.mutation.ClearURL()
	return cu
}

// SetCategory sets the "category" field.
func (cu *ContactUpdate) SetCategory(s string) *ContactUpdate {
	cu.mutation.SetCategory(s)
	return cu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableCategory(s *string) *ContactUpdate {
	if s != nil {
		cu.SetCategory(*s)
	}
	return cu
}

// ClearCategory clears the value of the "category" field.
func (cu *ContactUpdate) ClearCategory() *ContactUpdate {
	cu.mutation.ClearCategory()
	return cu
}

// SetCustomTitle sets the "custom_title" field.
func (cu *ContactUpdate) SetCustomTitle(s string) *ContactUpdate {
	cu.mutation.SetCustomTitle(s)
	return cu
}

// SetNillableCustomTitle sets the "custom_title" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableCustomTitle(s *string) *ContactUpdate {
	if s != nil {
		cu.SetCustomTitle(*s)
	}
	return cu
}

// ClearCustomTitle clears the value of the "custom_title" field.
func (cu *ContactUpdate) ClearCustomTitle() *ContactUpdate {
	cu.mutation.ClearCustomTitle()
	return cu
}

// SetCustomValue sets the "custom_value" field.
func (cu *ContactUpdate) SetCustomValue(s string) *ContactUpdate {
	cu.mutation.SetCustomValue(s)
	return cu
}

// SetNillableCustomValue sets the "custom_value" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableCustomValue(s *string) *ContactUpdate {
	if s != nil {
		cu.SetCustomValue(*s)
	}
	return cu
}

// ClearCustomValue clears the value of the "custom_value" field.
func (cu *ContactUpdate) ClearCustomValue() *ContactUpdate {
	cu.mutation.ClearCustomValue()
	return cu
}

// SetDeviceName sets the "device_name" field.
func (cu *ContactUpdate) SetDeviceName(s string) *ContactUpdate {
	cu.mutation.SetDeviceName(s)
	return cu
}

// SetNillableDeviceName sets the "device_name" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableDeviceName(s *string) *ContactUpdate {
	if s != nil {
		cu.SetDeviceName(*s)
	}
	return cu
}

// ClearDeviceName clears the value of the "device_name" field.
func (cu *ContactUpdate) ClearDeviceName() *ContactUpdate {
	cu.mutation.ClearDeviceName()
	return cu
}

// SetOs sets the "os" field.
func (cu *ContactUpdate) SetOs(s string) *ContactUpdate {
	cu.mutation.SetOs(s)
	return cu
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableOs(s *string) *ContactUpdate {
	if s != nil {
		cu.SetOs(*s)
	}
	return cu
}

// ClearOs clears the value of the "os" field.
func (cu *ContactUpdate) ClearOs() *ContactUpdate {
	cu.mutation.ClearOs()
	return cu
}

// SetBrowserName sets the "browser_name" field.
func (cu *ContactUpdate) SetBrowserName(s string) *ContactUpdate {
	cu.mutation.SetBrowserName(s)
	return cu
}

// SetNillableBrowserName sets the "browser_name" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableBrowserName(s *string) *ContactUpdate {
	if s != nil {
		cu.SetBrowserName(*s)
	}
	return cu
}

// ClearBrowserName clears the value of the "browser_name" field.
func (cu *ContactUpdate) ClearBrowserName() *ContactUpdate {
	cu.mutation.ClearBrowserName()
	return cu
}

// SetIsMobile sets the "is_mobile" field.
func (cu *ContactUpdate) SetIsMobile(b bool) *ContactUpdate {
	cu.mutation.SetIsMobile(b)
	return cu
}

// SetNillableIsMobile sets the "is_mobile" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableIsMobile(b *bool) *ContactUpdate {
	if b != nil {
		cu.SetIsMobile(*b)
	}
	return cu
}

// ClearIsMobile clears the value of the "is_mobile" field.
func (cu *ContactUpdate) ClearIsMobile() *ContactUpdate {
	cu.mutation.ClearIsMobile()
	return cu
}

// SetCreated sets the "created" field.
func (cu *ContactUpdate) SetCreated(t time.Time) *ContactUpdate {
	cu.mutation.SetCreated(t)
	return cu
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableCreated(t *time.Time) *ContactUpdate {
	if t != nil {
		cu.SetCreated(*t)
	}
	return cu
}

// SetModified sets the "modified" field.
func (cu *ContactUpdate) SetModified(t time.Time) *ContactUpdate {
	cu.mutation.SetModified(t)
	return cu
}

// Mutation returns the ContactMutation object of the builder.
func (cu *ContactUpdate) Mutation() *ContactMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ContactUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks[int, ContactMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ContactUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ContactUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ContactUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ContactUpdate) defaults() {
	if _, ok := cu.mutation.Modified(); !ok {
		v := contact.UpdateDefaultModified()
		cu.mutation.SetModified(v)
	}
}

func (cu *ContactUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(contact.Table, contact.Columns, sqlgraph.NewFieldSpec(contact.FieldID, field.TypeUint32))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.ToUserID(); ok {
		_spec.SetField(contact.FieldToUserID, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedToUserID(); ok {
		_spec.AddField(contact.FieldToUserID, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(contact.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Title(); ok {
		_spec.SetField(contact.FieldTitle, field.TypeString, value)
	}
	if value, ok := cu.mutation.Detail(); ok {
		_spec.SetField(contact.FieldDetail, field.TypeString, value)
	}
	if value, ok := cu.mutation.Mail(); ok {
		_spec.SetField(contact.FieldMail, field.TypeString, value)
	}
	if value, ok := cu.mutation.IP(); ok {
		_spec.SetField(contact.FieldIP, field.TypeString, value)
	}
	if value, ok := cu.mutation.Lang(); ok {
		_spec.SetField(contact.FieldLang, field.TypeString, value)
	}
	if value, ok := cu.mutation.URL(); ok {
		_spec.SetField(contact.FieldURL, field.TypeString, value)
	}
	if cu.mutation.URLCleared() {
		_spec.ClearField(contact.FieldURL, field.TypeString)
	}
	if value, ok := cu.mutation.Category(); ok {
		_spec.SetField(contact.FieldCategory, field.TypeString, value)
	}
	if cu.mutation.CategoryCleared() {
		_spec.ClearField(contact.FieldCategory, field.TypeString)
	}
	if value, ok := cu.mutation.CustomTitle(); ok {
		_spec.SetField(contact.FieldCustomTitle, field.TypeString, value)
	}
	if cu.mutation.CustomTitleCleared() {
		_spec.ClearField(contact.FieldCustomTitle, field.TypeString)
	}
	if value, ok := cu.mutation.CustomValue(); ok {
		_spec.SetField(contact.FieldCustomValue, field.TypeString, value)
	}
	if cu.mutation.CustomValueCleared() {
		_spec.ClearField(contact.FieldCustomValue, field.TypeString)
	}
	if value, ok := cu.mutation.DeviceName(); ok {
		_spec.SetField(contact.FieldDeviceName, field.TypeString, value)
	}
	if cu.mutation.DeviceNameCleared() {
		_spec.ClearField(contact.FieldDeviceName, field.TypeString)
	}
	if value, ok := cu.mutation.Os(); ok {
		_spec.SetField(contact.FieldOs, field.TypeString, value)
	}
	if cu.mutation.OsCleared() {
		_spec.ClearField(contact.FieldOs, field.TypeString)
	}
	if value, ok := cu.mutation.BrowserName(); ok {
		_spec.SetField(contact.FieldBrowserName, field.TypeString, value)
	}
	if cu.mutation.BrowserNameCleared() {
		_spec.ClearField(contact.FieldBrowserName, field.TypeString)
	}
	if value, ok := cu.mutation.IsMobile(); ok {
		_spec.SetField(contact.FieldIsMobile, field.TypeBool, value)
	}
	if cu.mutation.IsMobileCleared() {
		_spec.ClearField(contact.FieldIsMobile, field.TypeBool)
	}
	if value, ok := cu.mutation.Created(); ok {
		_spec.SetField(contact.FieldCreated, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Modified(); ok {
		_spec.SetField(contact.FieldModified, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ContactUpdateOne is the builder for updating a single Contact entity.
type ContactUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContactMutation
}

// SetToUserID sets the "to_user_id" field.
func (cuo *ContactUpdateOne) SetToUserID(u uint32) *ContactUpdateOne {
	cuo.mutation.ResetToUserID()
	cuo.mutation.SetToUserID(u)
	return cuo
}

// AddToUserID adds u to the "to_user_id" field.
func (cuo *ContactUpdateOne) AddToUserID(u int32) *ContactUpdateOne {
	cuo.mutation.AddToUserID(u)
	return cuo
}

// SetName sets the "name" field.
func (cuo *ContactUpdateOne) SetName(s string) *ContactUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetTitle sets the "title" field.
func (cuo *ContactUpdateOne) SetTitle(s string) *ContactUpdateOne {
	cuo.mutation.SetTitle(s)
	return cuo
}

// SetDetail sets the "detail" field.
func (cuo *ContactUpdateOne) SetDetail(s string) *ContactUpdateOne {
	cuo.mutation.SetDetail(s)
	return cuo
}

// SetMail sets the "mail" field.
func (cuo *ContactUpdateOne) SetMail(s string) *ContactUpdateOne {
	cuo.mutation.SetMail(s)
	return cuo
}

// SetIP sets the "ip" field.
func (cuo *ContactUpdateOne) SetIP(s string) *ContactUpdateOne {
	cuo.mutation.SetIP(s)
	return cuo
}

// SetLang sets the "lang" field.
func (cuo *ContactUpdateOne) SetLang(s string) *ContactUpdateOne {
	cuo.mutation.SetLang(s)
	return cuo
}

// SetURL sets the "url" field.
func (cuo *ContactUpdateOne) SetURL(s string) *ContactUpdateOne {
	cuo.mutation.SetURL(s)
	return cuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableURL(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetURL(*s)
	}
	return cuo
}

// ClearURL clears the value of the "url" field.
func (cuo *ContactUpdateOne) ClearURL() *ContactUpdateOne {
	cuo.mutation.ClearURL()
	return cuo
}

// SetCategory sets the "category" field.
func (cuo *ContactUpdateOne) SetCategory(s string) *ContactUpdateOne {
	cuo.mutation.SetCategory(s)
	return cuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableCategory(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetCategory(*s)
	}
	return cuo
}

// ClearCategory clears the value of the "category" field.
func (cuo *ContactUpdateOne) ClearCategory() *ContactUpdateOne {
	cuo.mutation.ClearCategory()
	return cuo
}

// SetCustomTitle sets the "custom_title" field.
func (cuo *ContactUpdateOne) SetCustomTitle(s string) *ContactUpdateOne {
	cuo.mutation.SetCustomTitle(s)
	return cuo
}

// SetNillableCustomTitle sets the "custom_title" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableCustomTitle(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetCustomTitle(*s)
	}
	return cuo
}

// ClearCustomTitle clears the value of the "custom_title" field.
func (cuo *ContactUpdateOne) ClearCustomTitle() *ContactUpdateOne {
	cuo.mutation.ClearCustomTitle()
	return cuo
}

// SetCustomValue sets the "custom_value" field.
func (cuo *ContactUpdateOne) SetCustomValue(s string) *ContactUpdateOne {
	cuo.mutation.SetCustomValue(s)
	return cuo
}

// SetNillableCustomValue sets the "custom_value" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableCustomValue(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetCustomValue(*s)
	}
	return cuo
}

// ClearCustomValue clears the value of the "custom_value" field.
func (cuo *ContactUpdateOne) ClearCustomValue() *ContactUpdateOne {
	cuo.mutation.ClearCustomValue()
	return cuo
}

// SetDeviceName sets the "device_name" field.
func (cuo *ContactUpdateOne) SetDeviceName(s string) *ContactUpdateOne {
	cuo.mutation.SetDeviceName(s)
	return cuo
}

// SetNillableDeviceName sets the "device_name" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableDeviceName(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetDeviceName(*s)
	}
	return cuo
}

// ClearDeviceName clears the value of the "device_name" field.
func (cuo *ContactUpdateOne) ClearDeviceName() *ContactUpdateOne {
	cuo.mutation.ClearDeviceName()
	return cuo
}

// SetOs sets the "os" field.
func (cuo *ContactUpdateOne) SetOs(s string) *ContactUpdateOne {
	cuo.mutation.SetOs(s)
	return cuo
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableOs(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetOs(*s)
	}
	return cuo
}

// ClearOs clears the value of the "os" field.
func (cuo *ContactUpdateOne) ClearOs() *ContactUpdateOne {
	cuo.mutation.ClearOs()
	return cuo
}

// SetBrowserName sets the "browser_name" field.
func (cuo *ContactUpdateOne) SetBrowserName(s string) *ContactUpdateOne {
	cuo.mutation.SetBrowserName(s)
	return cuo
}

// SetNillableBrowserName sets the "browser_name" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableBrowserName(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetBrowserName(*s)
	}
	return cuo
}

// ClearBrowserName clears the value of the "browser_name" field.
func (cuo *ContactUpdateOne) ClearBrowserName() *ContactUpdateOne {
	cuo.mutation.ClearBrowserName()
	return cuo
}

// SetIsMobile sets the "is_mobile" field.
func (cuo *ContactUpdateOne) SetIsMobile(b bool) *ContactUpdateOne {
	cuo.mutation.SetIsMobile(b)
	return cuo
}

// SetNillableIsMobile sets the "is_mobile" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableIsMobile(b *bool) *ContactUpdateOne {
	if b != nil {
		cuo.SetIsMobile(*b)
	}
	return cuo
}

// ClearIsMobile clears the value of the "is_mobile" field.
func (cuo *ContactUpdateOne) ClearIsMobile() *ContactUpdateOne {
	cuo.mutation.ClearIsMobile()
	return cuo
}

// SetCreated sets the "created" field.
func (cuo *ContactUpdateOne) SetCreated(t time.Time) *ContactUpdateOne {
	cuo.mutation.SetCreated(t)
	return cuo
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableCreated(t *time.Time) *ContactUpdateOne {
	if t != nil {
		cuo.SetCreated(*t)
	}
	return cuo
}

// SetModified sets the "modified" field.
func (cuo *ContactUpdateOne) SetModified(t time.Time) *ContactUpdateOne {
	cuo.mutation.SetModified(t)
	return cuo
}

// Mutation returns the ContactMutation object of the builder.
func (cuo *ContactUpdateOne) Mutation() *ContactMutation {
	return cuo.mutation
}

// Where appends a list predicates to the ContactUpdate builder.
func (cuo *ContactUpdateOne) Where(ps ...predicate.Contact) *ContactUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ContactUpdateOne) Select(field string, fields ...string) *ContactUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Contact entity.
func (cuo *ContactUpdateOne) Save(ctx context.Context) (*Contact, error) {
	cuo.defaults()
	return withHooks[*Contact, ContactMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ContactUpdateOne) SaveX(ctx context.Context) *Contact {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ContactUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ContactUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ContactUpdateOne) defaults() {
	if _, ok := cuo.mutation.Modified(); !ok {
		v := contact.UpdateDefaultModified()
		cuo.mutation.SetModified(v)
	}
}

func (cuo *ContactUpdateOne) sqlSave(ctx context.Context) (_node *Contact, err error) {
	_spec := sqlgraph.NewUpdateSpec(contact.Table, contact.Columns, sqlgraph.NewFieldSpec(contact.FieldID, field.TypeUint32))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Contact.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contact.FieldID)
		for _, f := range fields {
			if !contact.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.ToUserID(); ok {
		_spec.SetField(contact.FieldToUserID, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedToUserID(); ok {
		_spec.AddField(contact.FieldToUserID, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(contact.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Title(); ok {
		_spec.SetField(contact.FieldTitle, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Detail(); ok {
		_spec.SetField(contact.FieldDetail, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Mail(); ok {
		_spec.SetField(contact.FieldMail, field.TypeString, value)
	}
	if value, ok := cuo.mutation.IP(); ok {
		_spec.SetField(contact.FieldIP, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Lang(); ok {
		_spec.SetField(contact.FieldLang, field.TypeString, value)
	}
	if value, ok := cuo.mutation.URL(); ok {
		_spec.SetField(contact.FieldURL, field.TypeString, value)
	}
	if cuo.mutation.URLCleared() {
		_spec.ClearField(contact.FieldURL, field.TypeString)
	}
	if value, ok := cuo.mutation.Category(); ok {
		_spec.SetField(contact.FieldCategory, field.TypeString, value)
	}
	if cuo.mutation.CategoryCleared() {
		_spec.ClearField(contact.FieldCategory, field.TypeString)
	}
	if value, ok := cuo.mutation.CustomTitle(); ok {
		_spec.SetField(contact.FieldCustomTitle, field.TypeString, value)
	}
	if cuo.mutation.CustomTitleCleared() {
		_spec.ClearField(contact.FieldCustomTitle, field.TypeString)
	}
	if value, ok := cuo.mutation.CustomValue(); ok {
		_spec.SetField(contact.FieldCustomValue, field.TypeString, value)
	}
	if cuo.mutation.CustomValueCleared() {
		_spec.ClearField(contact.FieldCustomValue, field.TypeString)
	}
	if value, ok := cuo.mutation.DeviceName(); ok {
		_spec.SetField(contact.FieldDeviceName, field.TypeString, value)
	}
	if cuo.mutation.DeviceNameCleared() {
		_spec.ClearField(contact.FieldDeviceName, field.TypeString)
	}
	if value, ok := cuo.mutation.Os(); ok {
		_spec.SetField(contact.FieldOs, field.TypeString, value)
	}
	if cuo.mutation.OsCleared() {
		_spec.ClearField(contact.FieldOs, field.TypeString)
	}
	if value, ok := cuo.mutation.BrowserName(); ok {
		_spec.SetField(contact.FieldBrowserName, field.TypeString, value)
	}
	if cuo.mutation.BrowserNameCleared() {
		_spec.ClearField(contact.FieldBrowserName, field.TypeString)
	}
	if value, ok := cuo.mutation.IsMobile(); ok {
		_spec.SetField(contact.FieldIsMobile, field.TypeBool, value)
	}
	if cuo.mutation.IsMobileCleared() {
		_spec.ClearField(contact.FieldIsMobile, field.TypeBool)
	}
	if value, ok := cuo.mutation.Created(); ok {
		_spec.SetField(contact.FieldCreated, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Modified(); ok {
		_spec.SetField(contact.FieldModified, field.TypeTime, value)
	}
	_node = &Contact{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
