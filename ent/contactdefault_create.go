// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cateiru/cateiru.com/ent/contactdefault"
)

// ContactDefaultCreate is the builder for creating a ContactDefault entity.
type ContactDefaultCreate struct {
	config
	mutation *ContactDefaultMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cdc *ContactDefaultCreate) SetName(s string) *ContactDefaultCreate {
	cdc.mutation.SetName(s)
	return cdc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cdc *ContactDefaultCreate) SetNillableName(s *string) *ContactDefaultCreate {
	if s != nil {
		cdc.SetName(*s)
	}
	return cdc
}

// SetEmail sets the "email" field.
func (cdc *ContactDefaultCreate) SetEmail(s string) *ContactDefaultCreate {
	cdc.mutation.SetEmail(s)
	return cdc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cdc *ContactDefaultCreate) SetNillableEmail(s *string) *ContactDefaultCreate {
	if s != nil {
		cdc.SetEmail(*s)
	}
	return cdc
}

// SetURL sets the "url" field.
func (cdc *ContactDefaultCreate) SetURL(s string) *ContactDefaultCreate {
	cdc.mutation.SetURL(s)
	return cdc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (cdc *ContactDefaultCreate) SetNillableURL(s *string) *ContactDefaultCreate {
	if s != nil {
		cdc.SetURL(*s)
	}
	return cdc
}

// SetCategory sets the "category" field.
func (cdc *ContactDefaultCreate) SetCategory(s string) *ContactDefaultCreate {
	cdc.mutation.SetCategory(s)
	return cdc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (cdc *ContactDefaultCreate) SetNillableCategory(s *string) *ContactDefaultCreate {
	if s != nil {
		cdc.SetCategory(*s)
	}
	return cdc
}

// SetCustomTitle sets the "custom_title" field.
func (cdc *ContactDefaultCreate) SetCustomTitle(s string) *ContactDefaultCreate {
	cdc.mutation.SetCustomTitle(s)
	return cdc
}

// SetNillableCustomTitle sets the "custom_title" field if the given value is not nil.
func (cdc *ContactDefaultCreate) SetNillableCustomTitle(s *string) *ContactDefaultCreate {
	if s != nil {
		cdc.SetCustomTitle(*s)
	}
	return cdc
}

// SetDescription sets the "description" field.
func (cdc *ContactDefaultCreate) SetDescription(s string) *ContactDefaultCreate {
	cdc.mutation.SetDescription(s)
	return cdc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cdc *ContactDefaultCreate) SetNillableDescription(s *string) *ContactDefaultCreate {
	if s != nil {
		cdc.SetDescription(*s)
	}
	return cdc
}

// SetCreated sets the "created" field.
func (cdc *ContactDefaultCreate) SetCreated(t time.Time) *ContactDefaultCreate {
	cdc.mutation.SetCreated(t)
	return cdc
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (cdc *ContactDefaultCreate) SetNillableCreated(t *time.Time) *ContactDefaultCreate {
	if t != nil {
		cdc.SetCreated(*t)
	}
	return cdc
}

// SetModified sets the "modified" field.
func (cdc *ContactDefaultCreate) SetModified(t time.Time) *ContactDefaultCreate {
	cdc.mutation.SetModified(t)
	return cdc
}

// SetNillableModified sets the "modified" field if the given value is not nil.
func (cdc *ContactDefaultCreate) SetNillableModified(t *time.Time) *ContactDefaultCreate {
	if t != nil {
		cdc.SetModified(*t)
	}
	return cdc
}

// SetID sets the "id" field.
func (cdc *ContactDefaultCreate) SetID(u uint32) *ContactDefaultCreate {
	cdc.mutation.SetID(u)
	return cdc
}

// Mutation returns the ContactDefaultMutation object of the builder.
func (cdc *ContactDefaultCreate) Mutation() *ContactDefaultMutation {
	return cdc.mutation
}

// Save creates the ContactDefault in the database.
func (cdc *ContactDefaultCreate) Save(ctx context.Context) (*ContactDefault, error) {
	cdc.defaults()
	return withHooks[*ContactDefault, ContactDefaultMutation](ctx, cdc.sqlSave, cdc.mutation, cdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cdc *ContactDefaultCreate) SaveX(ctx context.Context) *ContactDefault {
	v, err := cdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cdc *ContactDefaultCreate) Exec(ctx context.Context) error {
	_, err := cdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdc *ContactDefaultCreate) ExecX(ctx context.Context) {
	if err := cdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cdc *ContactDefaultCreate) defaults() {
	if _, ok := cdc.mutation.Created(); !ok {
		v := contactdefault.DefaultCreated()
		cdc.mutation.SetCreated(v)
	}
	if _, ok := cdc.mutation.Modified(); !ok {
		v := contactdefault.DefaultModified()
		cdc.mutation.SetModified(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cdc *ContactDefaultCreate) check() error {
	if _, ok := cdc.mutation.Created(); !ok {
		return &ValidationError{Name: "created", err: errors.New(`ent: missing required field "ContactDefault.created"`)}
	}
	if _, ok := cdc.mutation.Modified(); !ok {
		return &ValidationError{Name: "modified", err: errors.New(`ent: missing required field "ContactDefault.modified"`)}
	}
	return nil
}

func (cdc *ContactDefaultCreate) sqlSave(ctx context.Context) (*ContactDefault, error) {
	if err := cdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	cdc.mutation.id = &_node.ID
	cdc.mutation.done = true
	return _node, nil
}

func (cdc *ContactDefaultCreate) createSpec() (*ContactDefault, *sqlgraph.CreateSpec) {
	var (
		_node = &ContactDefault{config: cdc.config}
		_spec = sqlgraph.NewCreateSpec(contactdefault.Table, sqlgraph.NewFieldSpec(contactdefault.FieldID, field.TypeUint32))
	)
	if id, ok := cdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cdc.mutation.Name(); ok {
		_spec.SetField(contactdefault.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := cdc.mutation.Email(); ok {
		_spec.SetField(contactdefault.FieldEmail, field.TypeString, value)
		_node.Email = &value
	}
	if value, ok := cdc.mutation.URL(); ok {
		_spec.SetField(contactdefault.FieldURL, field.TypeString, value)
		_node.URL = &value
	}
	if value, ok := cdc.mutation.Category(); ok {
		_spec.SetField(contactdefault.FieldCategory, field.TypeString, value)
		_node.Category = &value
	}
	if value, ok := cdc.mutation.CustomTitle(); ok {
		_spec.SetField(contactdefault.FieldCustomTitle, field.TypeString, value)
		_node.CustomTitle = &value
	}
	if value, ok := cdc.mutation.Description(); ok {
		_spec.SetField(contactdefault.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := cdc.mutation.Created(); ok {
		_spec.SetField(contactdefault.FieldCreated, field.TypeTime, value)
		_node.Created = value
	}
	if value, ok := cdc.mutation.Modified(); ok {
		_spec.SetField(contactdefault.FieldModified, field.TypeTime, value)
		_node.Modified = value
	}
	return _node, _spec
}

// ContactDefaultCreateBulk is the builder for creating many ContactDefault entities in bulk.
type ContactDefaultCreateBulk struct {
	config
	builders []*ContactDefaultCreate
}

// Save creates the ContactDefault entities in the database.
func (cdcb *ContactDefaultCreateBulk) Save(ctx context.Context) ([]*ContactDefault, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cdcb.builders))
	nodes := make([]*ContactDefault, len(cdcb.builders))
	mutators := make([]Mutator, len(cdcb.builders))
	for i := range cdcb.builders {
		func(i int, root context.Context) {
			builder := cdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContactDefaultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cdcb *ContactDefaultCreateBulk) SaveX(ctx context.Context) []*ContactDefault {
	v, err := cdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cdcb *ContactDefaultCreateBulk) Exec(ctx context.Context) error {
	_, err := cdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdcb *ContactDefaultCreateBulk) ExecX(ctx context.Context) {
	if err := cdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
