// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cateiru/cateiru.com/ent/contactdefault"
	"github.com/cateiru/cateiru.com/ent/predicate"
)

// ContactDefaultUpdate is the builder for updating ContactDefault entities.
type ContactDefaultUpdate struct {
	config
	hooks    []Hook
	mutation *ContactDefaultMutation
}

// Where appends a list predicates to the ContactDefaultUpdate builder.
func (cdu *ContactDefaultUpdate) Where(ps ...predicate.ContactDefault) *ContactDefaultUpdate {
	cdu.mutation.Where(ps...)
	return cdu
}

// SetName sets the "name" field.
func (cdu *ContactDefaultUpdate) SetName(s string) *ContactDefaultUpdate {
	cdu.mutation.SetName(s)
	return cdu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cdu *ContactDefaultUpdate) SetNillableName(s *string) *ContactDefaultUpdate {
	if s != nil {
		cdu.SetName(*s)
	}
	return cdu
}

// ClearName clears the value of the "name" field.
func (cdu *ContactDefaultUpdate) ClearName() *ContactDefaultUpdate {
	cdu.mutation.ClearName()
	return cdu
}

// SetEmail sets the "email" field.
func (cdu *ContactDefaultUpdate) SetEmail(s string) *ContactDefaultUpdate {
	cdu.mutation.SetEmail(s)
	return cdu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cdu *ContactDefaultUpdate) SetNillableEmail(s *string) *ContactDefaultUpdate {
	if s != nil {
		cdu.SetEmail(*s)
	}
	return cdu
}

// ClearEmail clears the value of the "email" field.
func (cdu *ContactDefaultUpdate) ClearEmail() *ContactDefaultUpdate {
	cdu.mutation.ClearEmail()
	return cdu
}

// SetURL sets the "url" field.
func (cdu *ContactDefaultUpdate) SetURL(s string) *ContactDefaultUpdate {
	cdu.mutation.SetURL(s)
	return cdu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (cdu *ContactDefaultUpdate) SetNillableURL(s *string) *ContactDefaultUpdate {
	if s != nil {
		cdu.SetURL(*s)
	}
	return cdu
}

// ClearURL clears the value of the "url" field.
func (cdu *ContactDefaultUpdate) ClearURL() *ContactDefaultUpdate {
	cdu.mutation.ClearURL()
	return cdu
}

// SetCategory sets the "category" field.
func (cdu *ContactDefaultUpdate) SetCategory(s string) *ContactDefaultUpdate {
	cdu.mutation.SetCategory(s)
	return cdu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (cdu *ContactDefaultUpdate) SetNillableCategory(s *string) *ContactDefaultUpdate {
	if s != nil {
		cdu.SetCategory(*s)
	}
	return cdu
}

// ClearCategory clears the value of the "category" field.
func (cdu *ContactDefaultUpdate) ClearCategory() *ContactDefaultUpdate {
	cdu.mutation.ClearCategory()
	return cdu
}

// SetCustomTitle sets the "custom_title" field.
func (cdu *ContactDefaultUpdate) SetCustomTitle(s string) *ContactDefaultUpdate {
	cdu.mutation.SetCustomTitle(s)
	return cdu
}

// SetNillableCustomTitle sets the "custom_title" field if the given value is not nil.
func (cdu *ContactDefaultUpdate) SetNillableCustomTitle(s *string) *ContactDefaultUpdate {
	if s != nil {
		cdu.SetCustomTitle(*s)
	}
	return cdu
}

// ClearCustomTitle clears the value of the "custom_title" field.
func (cdu *ContactDefaultUpdate) ClearCustomTitle() *ContactDefaultUpdate {
	cdu.mutation.ClearCustomTitle()
	return cdu
}

// SetDescription sets the "description" field.
func (cdu *ContactDefaultUpdate) SetDescription(s string) *ContactDefaultUpdate {
	cdu.mutation.SetDescription(s)
	return cdu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cdu *ContactDefaultUpdate) SetNillableDescription(s *string) *ContactDefaultUpdate {
	if s != nil {
		cdu.SetDescription(*s)
	}
	return cdu
}

// ClearDescription clears the value of the "description" field.
func (cdu *ContactDefaultUpdate) ClearDescription() *ContactDefaultUpdate {
	cdu.mutation.ClearDescription()
	return cdu
}

// SetCreated sets the "created" field.
func (cdu *ContactDefaultUpdate) SetCreated(t time.Time) *ContactDefaultUpdate {
	cdu.mutation.SetCreated(t)
	return cdu
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (cdu *ContactDefaultUpdate) SetNillableCreated(t *time.Time) *ContactDefaultUpdate {
	if t != nil {
		cdu.SetCreated(*t)
	}
	return cdu
}

// SetModified sets the "modified" field.
func (cdu *ContactDefaultUpdate) SetModified(t time.Time) *ContactDefaultUpdate {
	cdu.mutation.SetModified(t)
	return cdu
}

// Mutation returns the ContactDefaultMutation object of the builder.
func (cdu *ContactDefaultUpdate) Mutation() *ContactDefaultMutation {
	return cdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cdu *ContactDefaultUpdate) Save(ctx context.Context) (int, error) {
	cdu.defaults()
	return withHooks[int, ContactDefaultMutation](ctx, cdu.sqlSave, cdu.mutation, cdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cdu *ContactDefaultUpdate) SaveX(ctx context.Context) int {
	affected, err := cdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cdu *ContactDefaultUpdate) Exec(ctx context.Context) error {
	_, err := cdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdu *ContactDefaultUpdate) ExecX(ctx context.Context) {
	if err := cdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cdu *ContactDefaultUpdate) defaults() {
	if _, ok := cdu.mutation.Modified(); !ok {
		v := contactdefault.UpdateDefaultModified()
		cdu.mutation.SetModified(v)
	}
}

func (cdu *ContactDefaultUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(contactdefault.Table, contactdefault.Columns, sqlgraph.NewFieldSpec(contactdefault.FieldID, field.TypeUint32))
	if ps := cdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cdu.mutation.Name(); ok {
		_spec.SetField(contactdefault.FieldName, field.TypeString, value)
	}
	if cdu.mutation.NameCleared() {
		_spec.ClearField(contactdefault.FieldName, field.TypeString)
	}
	if value, ok := cdu.mutation.Email(); ok {
		_spec.SetField(contactdefault.FieldEmail, field.TypeString, value)
	}
	if cdu.mutation.EmailCleared() {
		_spec.ClearField(contactdefault.FieldEmail, field.TypeString)
	}
	if value, ok := cdu.mutation.URL(); ok {
		_spec.SetField(contactdefault.FieldURL, field.TypeString, value)
	}
	if cdu.mutation.URLCleared() {
		_spec.ClearField(contactdefault.FieldURL, field.TypeString)
	}
	if value, ok := cdu.mutation.Category(); ok {
		_spec.SetField(contactdefault.FieldCategory, field.TypeString, value)
	}
	if cdu.mutation.CategoryCleared() {
		_spec.ClearField(contactdefault.FieldCategory, field.TypeString)
	}
	if value, ok := cdu.mutation.CustomTitle(); ok {
		_spec.SetField(contactdefault.FieldCustomTitle, field.TypeString, value)
	}
	if cdu.mutation.CustomTitleCleared() {
		_spec.ClearField(contactdefault.FieldCustomTitle, field.TypeString)
	}
	if value, ok := cdu.mutation.Description(); ok {
		_spec.SetField(contactdefault.FieldDescription, field.TypeString, value)
	}
	if cdu.mutation.DescriptionCleared() {
		_spec.ClearField(contactdefault.FieldDescription, field.TypeString)
	}
	if value, ok := cdu.mutation.Created(); ok {
		_spec.SetField(contactdefault.FieldCreated, field.TypeTime, value)
	}
	if value, ok := cdu.mutation.Modified(); ok {
		_spec.SetField(contactdefault.FieldModified, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactdefault.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cdu.mutation.done = true
	return n, nil
}

// ContactDefaultUpdateOne is the builder for updating a single ContactDefault entity.
type ContactDefaultUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContactDefaultMutation
}

// SetName sets the "name" field.
func (cduo *ContactDefaultUpdateOne) SetName(s string) *ContactDefaultUpdateOne {
	cduo.mutation.SetName(s)
	return cduo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cduo *ContactDefaultUpdateOne) SetNillableName(s *string) *ContactDefaultUpdateOne {
	if s != nil {
		cduo.SetName(*s)
	}
	return cduo
}

// ClearName clears the value of the "name" field.
func (cduo *ContactDefaultUpdateOne) ClearName() *ContactDefaultUpdateOne {
	cduo.mutation.ClearName()
	return cduo
}

// SetEmail sets the "email" field.
func (cduo *ContactDefaultUpdateOne) SetEmail(s string) *ContactDefaultUpdateOne {
	cduo.mutation.SetEmail(s)
	return cduo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cduo *ContactDefaultUpdateOne) SetNillableEmail(s *string) *ContactDefaultUpdateOne {
	if s != nil {
		cduo.SetEmail(*s)
	}
	return cduo
}

// ClearEmail clears the value of the "email" field.
func (cduo *ContactDefaultUpdateOne) ClearEmail() *ContactDefaultUpdateOne {
	cduo.mutation.ClearEmail()
	return cduo
}

// SetURL sets the "url" field.
func (cduo *ContactDefaultUpdateOne) SetURL(s string) *ContactDefaultUpdateOne {
	cduo.mutation.SetURL(s)
	return cduo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (cduo *ContactDefaultUpdateOne) SetNillableURL(s *string) *ContactDefaultUpdateOne {
	if s != nil {
		cduo.SetURL(*s)
	}
	return cduo
}

// ClearURL clears the value of the "url" field.
func (cduo *ContactDefaultUpdateOne) ClearURL() *ContactDefaultUpdateOne {
	cduo.mutation.ClearURL()
	return cduo
}

// SetCategory sets the "category" field.
func (cduo *ContactDefaultUpdateOne) SetCategory(s string) *ContactDefaultUpdateOne {
	cduo.mutation.SetCategory(s)
	return cduo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (cduo *ContactDefaultUpdateOne) SetNillableCategory(s *string) *ContactDefaultUpdateOne {
	if s != nil {
		cduo.SetCategory(*s)
	}
	return cduo
}

// ClearCategory clears the value of the "category" field.
func (cduo *ContactDefaultUpdateOne) ClearCategory() *ContactDefaultUpdateOne {
	cduo.mutation.ClearCategory()
	return cduo
}

// SetCustomTitle sets the "custom_title" field.
func (cduo *ContactDefaultUpdateOne) SetCustomTitle(s string) *ContactDefaultUpdateOne {
	cduo.mutation.SetCustomTitle(s)
	return cduo
}

// SetNillableCustomTitle sets the "custom_title" field if the given value is not nil.
func (cduo *ContactDefaultUpdateOne) SetNillableCustomTitle(s *string) *ContactDefaultUpdateOne {
	if s != nil {
		cduo.SetCustomTitle(*s)
	}
	return cduo
}

// ClearCustomTitle clears the value of the "custom_title" field.
func (cduo *ContactDefaultUpdateOne) ClearCustomTitle() *ContactDefaultUpdateOne {
	cduo.mutation.ClearCustomTitle()
	return cduo
}

// SetDescription sets the "description" field.
func (cduo *ContactDefaultUpdateOne) SetDescription(s string) *ContactDefaultUpdateOne {
	cduo.mutation.SetDescription(s)
	return cduo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cduo *ContactDefaultUpdateOne) SetNillableDescription(s *string) *ContactDefaultUpdateOne {
	if s != nil {
		cduo.SetDescription(*s)
	}
	return cduo
}

// ClearDescription clears the value of the "description" field.
func (cduo *ContactDefaultUpdateOne) ClearDescription() *ContactDefaultUpdateOne {
	cduo.mutation.ClearDescription()
	return cduo
}

// SetCreated sets the "created" field.
func (cduo *ContactDefaultUpdateOne) SetCreated(t time.Time) *ContactDefaultUpdateOne {
	cduo.mutation.SetCreated(t)
	return cduo
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (cduo *ContactDefaultUpdateOne) SetNillableCreated(t *time.Time) *ContactDefaultUpdateOne {
	if t != nil {
		cduo.SetCreated(*t)
	}
	return cduo
}

// SetModified sets the "modified" field.
func (cduo *ContactDefaultUpdateOne) SetModified(t time.Time) *ContactDefaultUpdateOne {
	cduo.mutation.SetModified(t)
	return cduo
}

// Mutation returns the ContactDefaultMutation object of the builder.
func (cduo *ContactDefaultUpdateOne) Mutation() *ContactDefaultMutation {
	return cduo.mutation
}

// Where appends a list predicates to the ContactDefaultUpdate builder.
func (cduo *ContactDefaultUpdateOne) Where(ps ...predicate.ContactDefault) *ContactDefaultUpdateOne {
	cduo.mutation.Where(ps...)
	return cduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cduo *ContactDefaultUpdateOne) Select(field string, fields ...string) *ContactDefaultUpdateOne {
	cduo.fields = append([]string{field}, fields...)
	return cduo
}

// Save executes the query and returns the updated ContactDefault entity.
func (cduo *ContactDefaultUpdateOne) Save(ctx context.Context) (*ContactDefault, error) {
	cduo.defaults()
	return withHooks[*ContactDefault, ContactDefaultMutation](ctx, cduo.sqlSave, cduo.mutation, cduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cduo *ContactDefaultUpdateOne) SaveX(ctx context.Context) *ContactDefault {
	node, err := cduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cduo *ContactDefaultUpdateOne) Exec(ctx context.Context) error {
	_, err := cduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cduo *ContactDefaultUpdateOne) ExecX(ctx context.Context) {
	if err := cduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cduo *ContactDefaultUpdateOne) defaults() {
	if _, ok := cduo.mutation.Modified(); !ok {
		v := contactdefault.UpdateDefaultModified()
		cduo.mutation.SetModified(v)
	}
}

func (cduo *ContactDefaultUpdateOne) sqlSave(ctx context.Context) (_node *ContactDefault, err error) {
	_spec := sqlgraph.NewUpdateSpec(contactdefault.Table, contactdefault.Columns, sqlgraph.NewFieldSpec(contactdefault.FieldID, field.TypeUint32))
	id, ok := cduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ContactDefault.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contactdefault.FieldID)
		for _, f := range fields {
			if !contactdefault.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contactdefault.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cduo.mutation.Name(); ok {
		_spec.SetField(contactdefault.FieldName, field.TypeString, value)
	}
	if cduo.mutation.NameCleared() {
		_spec.ClearField(contactdefault.FieldName, field.TypeString)
	}
	if value, ok := cduo.mutation.Email(); ok {
		_spec.SetField(contactdefault.FieldEmail, field.TypeString, value)
	}
	if cduo.mutation.EmailCleared() {
		_spec.ClearField(contactdefault.FieldEmail, field.TypeString)
	}
	if value, ok := cduo.mutation.URL(); ok {
		_spec.SetField(contactdefault.FieldURL, field.TypeString, value)
	}
	if cduo.mutation.URLCleared() {
		_spec.ClearField(contactdefault.FieldURL, field.TypeString)
	}
	if value, ok := cduo.mutation.Category(); ok {
		_spec.SetField(contactdefault.FieldCategory, field.TypeString, value)
	}
	if cduo.mutation.CategoryCleared() {
		_spec.ClearField(contactdefault.FieldCategory, field.TypeString)
	}
	if value, ok := cduo.mutation.CustomTitle(); ok {
		_spec.SetField(contactdefault.FieldCustomTitle, field.TypeString, value)
	}
	if cduo.mutation.CustomTitleCleared() {
		_spec.ClearField(contactdefault.FieldCustomTitle, field.TypeString)
	}
	if value, ok := cduo.mutation.Description(); ok {
		_spec.SetField(contactdefault.FieldDescription, field.TypeString, value)
	}
	if cduo.mutation.DescriptionCleared() {
		_spec.ClearField(contactdefault.FieldDescription, field.TypeString)
	}
	if value, ok := cduo.mutation.Created(); ok {
		_spec.SetField(contactdefault.FieldCreated, field.TypeTime, value)
	}
	if value, ok := cduo.mutation.Modified(); ok {
		_spec.SetField(contactdefault.FieldModified, field.TypeTime, value)
	}
	_node = &ContactDefault{config: cduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactdefault.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cduo.mutation.done = true
	return _node, nil
}
