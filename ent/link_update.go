// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cateiru/cateiru.com/ent/link"
	"github.com/cateiru/cateiru.com/ent/predicate"
)

// LinkUpdate is the builder for updating Link entities.
type LinkUpdate struct {
	config
	hooks    []Hook
	mutation *LinkMutation
}

// Where appends a list predicates to the LinkUpdate builder.
func (lu *LinkUpdate) Where(ps ...predicate.Link) *LinkUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetUserID sets the "user_id" field.
func (lu *LinkUpdate) SetUserID(u uint32) *LinkUpdate {
	lu.mutation.ResetUserID()
	lu.mutation.SetUserID(u)
	return lu
}

// AddUserID adds u to the "user_id" field.
func (lu *LinkUpdate) AddUserID(u int32) *LinkUpdate {
	lu.mutation.AddUserID(u)
	return lu
}

// SetName sets the "name" field.
func (lu *LinkUpdate) SetName(s string) *LinkUpdate {
	lu.mutation.SetName(s)
	return lu
}

// SetNameJa sets the "name_ja" field.
func (lu *LinkUpdate) SetNameJa(s string) *LinkUpdate {
	lu.mutation.SetNameJa(s)
	return lu
}

// SetSiteURL sets the "site_url" field.
func (lu *LinkUpdate) SetSiteURL(s string) *LinkUpdate {
	lu.mutation.SetSiteURL(s)
	return lu
}

// SetFaviconURL sets the "favicon_url" field.
func (lu *LinkUpdate) SetFaviconURL(s string) *LinkUpdate {
	lu.mutation.SetFaviconURL(s)
	return lu
}

// SetNillableFaviconURL sets the "favicon_url" field if the given value is not nil.
func (lu *LinkUpdate) SetNillableFaviconURL(s *string) *LinkUpdate {
	if s != nil {
		lu.SetFaviconURL(*s)
	}
	return lu
}

// ClearFaviconURL clears the value of the "favicon_url" field.
func (lu *LinkUpdate) ClearFaviconURL() *LinkUpdate {
	lu.mutation.ClearFaviconURL()
	return lu
}

// SetCategoryID sets the "category_id" field.
func (lu *LinkUpdate) SetCategoryID(u uint32) *LinkUpdate {
	lu.mutation.ResetCategoryID()
	lu.mutation.SetCategoryID(u)
	return lu
}

// AddCategoryID adds u to the "category_id" field.
func (lu *LinkUpdate) AddCategoryID(u int32) *LinkUpdate {
	lu.mutation.AddCategoryID(u)
	return lu
}

// SetCreated sets the "created" field.
func (lu *LinkUpdate) SetCreated(t time.Time) *LinkUpdate {
	lu.mutation.SetCreated(t)
	return lu
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (lu *LinkUpdate) SetNillableCreated(t *time.Time) *LinkUpdate {
	if t != nil {
		lu.SetCreated(*t)
	}
	return lu
}

// SetModified sets the "modified" field.
func (lu *LinkUpdate) SetModified(t time.Time) *LinkUpdate {
	lu.mutation.SetModified(t)
	return lu
}

// Mutation returns the LinkMutation object of the builder.
func (lu *LinkUpdate) Mutation() *LinkMutation {
	return lu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LinkUpdate) Save(ctx context.Context) (int, error) {
	lu.defaults()
	return withHooks[int, LinkMutation](ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LinkUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LinkUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LinkUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *LinkUpdate) defaults() {
	if _, ok := lu.mutation.Modified(); !ok {
		v := link.UpdateDefaultModified()
		lu.mutation.SetModified(v)
	}
}

func (lu *LinkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(link.Table, link.Columns, sqlgraph.NewFieldSpec(link.FieldID, field.TypeUint32))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.UserID(); ok {
		_spec.SetField(link.FieldUserID, field.TypeUint32, value)
	}
	if value, ok := lu.mutation.AddedUserID(); ok {
		_spec.AddField(link.FieldUserID, field.TypeUint32, value)
	}
	if value, ok := lu.mutation.Name(); ok {
		_spec.SetField(link.FieldName, field.TypeString, value)
	}
	if value, ok := lu.mutation.NameJa(); ok {
		_spec.SetField(link.FieldNameJa, field.TypeString, value)
	}
	if value, ok := lu.mutation.SiteURL(); ok {
		_spec.SetField(link.FieldSiteURL, field.TypeString, value)
	}
	if value, ok := lu.mutation.FaviconURL(); ok {
		_spec.SetField(link.FieldFaviconURL, field.TypeString, value)
	}
	if lu.mutation.FaviconURLCleared() {
		_spec.ClearField(link.FieldFaviconURL, field.TypeString)
	}
	if value, ok := lu.mutation.CategoryID(); ok {
		_spec.SetField(link.FieldCategoryID, field.TypeUint32, value)
	}
	if value, ok := lu.mutation.AddedCategoryID(); ok {
		_spec.AddField(link.FieldCategoryID, field.TypeUint32, value)
	}
	if value, ok := lu.mutation.Created(); ok {
		_spec.SetField(link.FieldCreated, field.TypeTime, value)
	}
	if value, ok := lu.mutation.Modified(); ok {
		_spec.SetField(link.FieldModified, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{link.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LinkUpdateOne is the builder for updating a single Link entity.
type LinkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LinkMutation
}

// SetUserID sets the "user_id" field.
func (luo *LinkUpdateOne) SetUserID(u uint32) *LinkUpdateOne {
	luo.mutation.ResetUserID()
	luo.mutation.SetUserID(u)
	return luo
}

// AddUserID adds u to the "user_id" field.
func (luo *LinkUpdateOne) AddUserID(u int32) *LinkUpdateOne {
	luo.mutation.AddUserID(u)
	return luo
}

// SetName sets the "name" field.
func (luo *LinkUpdateOne) SetName(s string) *LinkUpdateOne {
	luo.mutation.SetName(s)
	return luo
}

// SetNameJa sets the "name_ja" field.
func (luo *LinkUpdateOne) SetNameJa(s string) *LinkUpdateOne {
	luo.mutation.SetNameJa(s)
	return luo
}

// SetSiteURL sets the "site_url" field.
func (luo *LinkUpdateOne) SetSiteURL(s string) *LinkUpdateOne {
	luo.mutation.SetSiteURL(s)
	return luo
}

// SetFaviconURL sets the "favicon_url" field.
func (luo *LinkUpdateOne) SetFaviconURL(s string) *LinkUpdateOne {
	luo.mutation.SetFaviconURL(s)
	return luo
}

// SetNillableFaviconURL sets the "favicon_url" field if the given value is not nil.
func (luo *LinkUpdateOne) SetNillableFaviconURL(s *string) *LinkUpdateOne {
	if s != nil {
		luo.SetFaviconURL(*s)
	}
	return luo
}

// ClearFaviconURL clears the value of the "favicon_url" field.
func (luo *LinkUpdateOne) ClearFaviconURL() *LinkUpdateOne {
	luo.mutation.ClearFaviconURL()
	return luo
}

// SetCategoryID sets the "category_id" field.
func (luo *LinkUpdateOne) SetCategoryID(u uint32) *LinkUpdateOne {
	luo.mutation.ResetCategoryID()
	luo.mutation.SetCategoryID(u)
	return luo
}

// AddCategoryID adds u to the "category_id" field.
func (luo *LinkUpdateOne) AddCategoryID(u int32) *LinkUpdateOne {
	luo.mutation.AddCategoryID(u)
	return luo
}

// SetCreated sets the "created" field.
func (luo *LinkUpdateOne) SetCreated(t time.Time) *LinkUpdateOne {
	luo.mutation.SetCreated(t)
	return luo
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (luo *LinkUpdateOne) SetNillableCreated(t *time.Time) *LinkUpdateOne {
	if t != nil {
		luo.SetCreated(*t)
	}
	return luo
}

// SetModified sets the "modified" field.
func (luo *LinkUpdateOne) SetModified(t time.Time) *LinkUpdateOne {
	luo.mutation.SetModified(t)
	return luo
}

// Mutation returns the LinkMutation object of the builder.
func (luo *LinkUpdateOne) Mutation() *LinkMutation {
	return luo.mutation
}

// Where appends a list predicates to the LinkUpdate builder.
func (luo *LinkUpdateOne) Where(ps ...predicate.Link) *LinkUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LinkUpdateOne) Select(field string, fields ...string) *LinkUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Link entity.
func (luo *LinkUpdateOne) Save(ctx context.Context) (*Link, error) {
	luo.defaults()
	return withHooks[*Link, LinkMutation](ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LinkUpdateOne) SaveX(ctx context.Context) *Link {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LinkUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LinkUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *LinkUpdateOne) defaults() {
	if _, ok := luo.mutation.Modified(); !ok {
		v := link.UpdateDefaultModified()
		luo.mutation.SetModified(v)
	}
}

func (luo *LinkUpdateOne) sqlSave(ctx context.Context) (_node *Link, err error) {
	_spec := sqlgraph.NewUpdateSpec(link.Table, link.Columns, sqlgraph.NewFieldSpec(link.FieldID, field.TypeUint32))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Link.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, link.FieldID)
		for _, f := range fields {
			if !link.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != link.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.UserID(); ok {
		_spec.SetField(link.FieldUserID, field.TypeUint32, value)
	}
	if value, ok := luo.mutation.AddedUserID(); ok {
		_spec.AddField(link.FieldUserID, field.TypeUint32, value)
	}
	if value, ok := luo.mutation.Name(); ok {
		_spec.SetField(link.FieldName, field.TypeString, value)
	}
	if value, ok := luo.mutation.NameJa(); ok {
		_spec.SetField(link.FieldNameJa, field.TypeString, value)
	}
	if value, ok := luo.mutation.SiteURL(); ok {
		_spec.SetField(link.FieldSiteURL, field.TypeString, value)
	}
	if value, ok := luo.mutation.FaviconURL(); ok {
		_spec.SetField(link.FieldFaviconURL, field.TypeString, value)
	}
	if luo.mutation.FaviconURLCleared() {
		_spec.ClearField(link.FieldFaviconURL, field.TypeString)
	}
	if value, ok := luo.mutation.CategoryID(); ok {
		_spec.SetField(link.FieldCategoryID, field.TypeUint32, value)
	}
	if value, ok := luo.mutation.AddedCategoryID(); ok {
		_spec.AddField(link.FieldCategoryID, field.TypeUint32, value)
	}
	if value, ok := luo.mutation.Created(); ok {
		_spec.SetField(link.FieldCreated, field.TypeTime, value)
	}
	if value, ok := luo.mutation.Modified(); ok {
		_spec.SetField(link.FieldModified, field.TypeTime, value)
	}
	_node = &Link{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{link.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
