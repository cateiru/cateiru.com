// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/cateiru/cateiru.com/ent/notice"
)

// Notice is the model entity for the Notice schema.
type Notice struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// DiscordWebhook holds the value of the "discord_webhook" field.
	DiscordWebhook string `json:"discord_webhook,omitempty"`
	// SlackWebhook holds the value of the "slack_webhook" field.
	SlackWebhook string `json:"slack_webhook,omitempty"`
	// Mail holds the value of the "mail" field.
	Mail string `json:"mail,omitempty"`
	// Created holds the value of the "created" field.
	Created time.Time `json:"created,omitempty"`
	// Modified holds the value of the "modified" field.
	Modified time.Time `json:"modified,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Notice) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case notice.FieldID:
			values[i] = new(sql.NullInt64)
		case notice.FieldDiscordWebhook, notice.FieldSlackWebhook, notice.FieldMail:
			values[i] = new(sql.NullString)
		case notice.FieldCreated, notice.FieldModified:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Notice", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Notice fields.
func (n *Notice) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notice.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			n.ID = uint32(value.Int64)
		case notice.FieldDiscordWebhook:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discord_webhook", values[i])
			} else if value.Valid {
				n.DiscordWebhook = value.String
			}
		case notice.FieldSlackWebhook:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slack_webhook", values[i])
			} else if value.Valid {
				n.SlackWebhook = value.String
			}
		case notice.FieldMail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mail", values[i])
			} else if value.Valid {
				n.Mail = value.String
			}
		case notice.FieldCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created", values[i])
			} else if value.Valid {
				n.Created = value.Time
			}
		case notice.FieldModified:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modified", values[i])
			} else if value.Valid {
				n.Modified = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Notice.
// Note that you need to call Notice.Unwrap() before calling this method if this Notice
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Notice) Update() *NoticeUpdateOne {
	return (&NoticeClient{config: n.config}).UpdateOne(n)
}

// Unwrap unwraps the Notice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Notice) Unwrap() *Notice {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Notice is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Notice) String() string {
	var builder strings.Builder
	builder.WriteString("Notice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("discord_webhook=")
	builder.WriteString(n.DiscordWebhook)
	builder.WriteString(", ")
	builder.WriteString("slack_webhook=")
	builder.WriteString(n.SlackWebhook)
	builder.WriteString(", ")
	builder.WriteString("mail=")
	builder.WriteString(n.Mail)
	builder.WriteString(", ")
	builder.WriteString("created=")
	builder.WriteString(n.Created.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("modified=")
	builder.WriteString(n.Modified.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Notices is a parsable slice of Notice.
type Notices []*Notice

func (n Notices) config(cfg config) {
	for _i := range n {
		n[_i].config = cfg
	}
}
