// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cateiru/cateiru.com/ent/notice"
)

// NoticeCreate is the builder for creating a Notice entity.
type NoticeCreate struct {
	config
	mutation *NoticeMutation
	hooks    []Hook
}

// SetDiscordWebhook sets the "discord_webhook" field.
func (nc *NoticeCreate) SetDiscordWebhook(s string) *NoticeCreate {
	nc.mutation.SetDiscordWebhook(s)
	return nc
}

// SetNillableDiscordWebhook sets the "discord_webhook" field if the given value is not nil.
func (nc *NoticeCreate) SetNillableDiscordWebhook(s *string) *NoticeCreate {
	if s != nil {
		nc.SetDiscordWebhook(*s)
	}
	return nc
}

// SetSlackWebhook sets the "slack_webhook" field.
func (nc *NoticeCreate) SetSlackWebhook(s string) *NoticeCreate {
	nc.mutation.SetSlackWebhook(s)
	return nc
}

// SetNillableSlackWebhook sets the "slack_webhook" field if the given value is not nil.
func (nc *NoticeCreate) SetNillableSlackWebhook(s *string) *NoticeCreate {
	if s != nil {
		nc.SetSlackWebhook(*s)
	}
	return nc
}

// SetMail sets the "mail" field.
func (nc *NoticeCreate) SetMail(s string) *NoticeCreate {
	nc.mutation.SetMail(s)
	return nc
}

// SetNillableMail sets the "mail" field if the given value is not nil.
func (nc *NoticeCreate) SetNillableMail(s *string) *NoticeCreate {
	if s != nil {
		nc.SetMail(*s)
	}
	return nc
}

// SetCreated sets the "created" field.
func (nc *NoticeCreate) SetCreated(t time.Time) *NoticeCreate {
	nc.mutation.SetCreated(t)
	return nc
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (nc *NoticeCreate) SetNillableCreated(t *time.Time) *NoticeCreate {
	if t != nil {
		nc.SetCreated(*t)
	}
	return nc
}

// SetModified sets the "modified" field.
func (nc *NoticeCreate) SetModified(t time.Time) *NoticeCreate {
	nc.mutation.SetModified(t)
	return nc
}

// SetNillableModified sets the "modified" field if the given value is not nil.
func (nc *NoticeCreate) SetNillableModified(t *time.Time) *NoticeCreate {
	if t != nil {
		nc.SetModified(*t)
	}
	return nc
}

// SetID sets the "id" field.
func (nc *NoticeCreate) SetID(u uint32) *NoticeCreate {
	nc.mutation.SetID(u)
	return nc
}

// Mutation returns the NoticeMutation object of the builder.
func (nc *NoticeCreate) Mutation() *NoticeMutation {
	return nc.mutation
}

// Save creates the Notice in the database.
func (nc *NoticeCreate) Save(ctx context.Context) (*Notice, error) {
	var (
		err  error
		node *Notice
	)
	nc.defaults()
	if len(nc.hooks) == 0 {
		if err = nc.check(); err != nil {
			return nil, err
		}
		node, err = nc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NoticeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nc.check(); err != nil {
				return nil, err
			}
			nc.mutation = mutation
			if node, err = nc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(nc.hooks) - 1; i >= 0; i-- {
			if nc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, nc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Notice)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from NoticeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NoticeCreate) SaveX(ctx context.Context) *Notice {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NoticeCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NoticeCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nc *NoticeCreate) defaults() {
	if _, ok := nc.mutation.Created(); !ok {
		v := notice.DefaultCreated()
		nc.mutation.SetCreated(v)
	}
	if _, ok := nc.mutation.Modified(); !ok {
		v := notice.DefaultModified()
		nc.mutation.SetModified(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NoticeCreate) check() error {
	if _, ok := nc.mutation.Created(); !ok {
		return &ValidationError{Name: "created", err: errors.New(`ent: missing required field "Notice.created"`)}
	}
	if _, ok := nc.mutation.Modified(); !ok {
		return &ValidationError{Name: "modified", err: errors.New(`ent: missing required field "Notice.modified"`)}
	}
	return nil
}

func (nc *NoticeCreate) sqlSave(ctx context.Context) (*Notice, error) {
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (nc *NoticeCreate) createSpec() (*Notice, *sqlgraph.CreateSpec) {
	var (
		_node = &Notice{config: nc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: notice.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: notice.FieldID,
			},
		}
	)
	if id, ok := nc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := nc.mutation.DiscordWebhook(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notice.FieldDiscordWebhook,
		})
		_node.DiscordWebhook = value
	}
	if value, ok := nc.mutation.SlackWebhook(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notice.FieldSlackWebhook,
		})
		_node.SlackWebhook = value
	}
	if value, ok := nc.mutation.Mail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notice.FieldMail,
		})
		_node.Mail = value
	}
	if value, ok := nc.mutation.Created(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: notice.FieldCreated,
		})
		_node.Created = value
	}
	if value, ok := nc.mutation.Modified(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: notice.FieldModified,
		})
		_node.Modified = value
	}
	return _node, _spec
}

// NoticeCreateBulk is the builder for creating many Notice entities in bulk.
type NoticeCreateBulk struct {
	config
	builders []*NoticeCreate
}

// Save creates the Notice entities in the database.
func (ncb *NoticeCreateBulk) Save(ctx context.Context) ([]*Notice, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Notice, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NoticeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NoticeCreateBulk) SaveX(ctx context.Context) []*Notice {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NoticeCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NoticeCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}
