// Code generated by ent, DO NOT EDIT.

package product

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/cateiru/cateiru.com/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint32) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldUserID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldName, v))
}

// NameJa applies equality check predicate on the "name_ja" field. It's identical to NameJaEQ.
func NameJa(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldNameJa, v))
}

// Detail applies equality check predicate on the "detail" field. It's identical to DetailEQ.
func Detail(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldDetail, v))
}

// DetailJa applies equality check predicate on the "detail_ja" field. It's identical to DetailJaEQ.
func DetailJa(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldDetailJa, v))
}

// SiteURL applies equality check predicate on the "site_url" field. It's identical to SiteURLEQ.
func SiteURL(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldSiteURL, v))
}

// GithubURL applies equality check predicate on the "github_url" field. It's identical to GithubURLEQ.
func GithubURL(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldGithubURL, v))
}

// DevTime applies equality check predicate on the "dev_time" field. It's identical to DevTimeEQ.
func DevTime(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldDevTime, v))
}

// Thumbnail applies equality check predicate on the "thumbnail" field. It's identical to ThumbnailEQ.
func Thumbnail(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldThumbnail, v))
}

// Created applies equality check predicate on the "created" field. It's identical to CreatedEQ.
func Created(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldCreated, v))
}

// Modified applies equality check predicate on the "modified" field. It's identical to ModifiedEQ.
func Modified(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldModified, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint32) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint32) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint32) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint32) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uint32) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uint32) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uint32) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uint32) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldUserID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldName, v))
}

// NameJaEQ applies the EQ predicate on the "name_ja" field.
func NameJaEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldNameJa, v))
}

// NameJaNEQ applies the NEQ predicate on the "name_ja" field.
func NameJaNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldNameJa, v))
}

// NameJaIn applies the In predicate on the "name_ja" field.
func NameJaIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldNameJa, vs...))
}

// NameJaNotIn applies the NotIn predicate on the "name_ja" field.
func NameJaNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldNameJa, vs...))
}

// NameJaGT applies the GT predicate on the "name_ja" field.
func NameJaGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldNameJa, v))
}

// NameJaGTE applies the GTE predicate on the "name_ja" field.
func NameJaGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldNameJa, v))
}

// NameJaLT applies the LT predicate on the "name_ja" field.
func NameJaLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldNameJa, v))
}

// NameJaLTE applies the LTE predicate on the "name_ja" field.
func NameJaLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldNameJa, v))
}

// NameJaContains applies the Contains predicate on the "name_ja" field.
func NameJaContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldNameJa, v))
}

// NameJaHasPrefix applies the HasPrefix predicate on the "name_ja" field.
func NameJaHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldNameJa, v))
}

// NameJaHasSuffix applies the HasSuffix predicate on the "name_ja" field.
func NameJaHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldNameJa, v))
}

// NameJaEqualFold applies the EqualFold predicate on the "name_ja" field.
func NameJaEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldNameJa, v))
}

// NameJaContainsFold applies the ContainsFold predicate on the "name_ja" field.
func NameJaContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldNameJa, v))
}

// DetailEQ applies the EQ predicate on the "detail" field.
func DetailEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldDetail, v))
}

// DetailNEQ applies the NEQ predicate on the "detail" field.
func DetailNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldDetail, v))
}

// DetailIn applies the In predicate on the "detail" field.
func DetailIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldDetail, vs...))
}

// DetailNotIn applies the NotIn predicate on the "detail" field.
func DetailNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldDetail, vs...))
}

// DetailGT applies the GT predicate on the "detail" field.
func DetailGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldDetail, v))
}

// DetailGTE applies the GTE predicate on the "detail" field.
func DetailGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldDetail, v))
}

// DetailLT applies the LT predicate on the "detail" field.
func DetailLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldDetail, v))
}

// DetailLTE applies the LTE predicate on the "detail" field.
func DetailLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldDetail, v))
}

// DetailContains applies the Contains predicate on the "detail" field.
func DetailContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldDetail, v))
}

// DetailHasPrefix applies the HasPrefix predicate on the "detail" field.
func DetailHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldDetail, v))
}

// DetailHasSuffix applies the HasSuffix predicate on the "detail" field.
func DetailHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldDetail, v))
}

// DetailEqualFold applies the EqualFold predicate on the "detail" field.
func DetailEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldDetail, v))
}

// DetailContainsFold applies the ContainsFold predicate on the "detail" field.
func DetailContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldDetail, v))
}

// DetailJaEQ applies the EQ predicate on the "detail_ja" field.
func DetailJaEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldDetailJa, v))
}

// DetailJaNEQ applies the NEQ predicate on the "detail_ja" field.
func DetailJaNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldDetailJa, v))
}

// DetailJaIn applies the In predicate on the "detail_ja" field.
func DetailJaIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldDetailJa, vs...))
}

// DetailJaNotIn applies the NotIn predicate on the "detail_ja" field.
func DetailJaNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldDetailJa, vs...))
}

// DetailJaGT applies the GT predicate on the "detail_ja" field.
func DetailJaGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldDetailJa, v))
}

// DetailJaGTE applies the GTE predicate on the "detail_ja" field.
func DetailJaGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldDetailJa, v))
}

// DetailJaLT applies the LT predicate on the "detail_ja" field.
func DetailJaLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldDetailJa, v))
}

// DetailJaLTE applies the LTE predicate on the "detail_ja" field.
func DetailJaLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldDetailJa, v))
}

// DetailJaContains applies the Contains predicate on the "detail_ja" field.
func DetailJaContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldDetailJa, v))
}

// DetailJaHasPrefix applies the HasPrefix predicate on the "detail_ja" field.
func DetailJaHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldDetailJa, v))
}

// DetailJaHasSuffix applies the HasSuffix predicate on the "detail_ja" field.
func DetailJaHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldDetailJa, v))
}

// DetailJaEqualFold applies the EqualFold predicate on the "detail_ja" field.
func DetailJaEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldDetailJa, v))
}

// DetailJaContainsFold applies the ContainsFold predicate on the "detail_ja" field.
func DetailJaContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldDetailJa, v))
}

// SiteURLEQ applies the EQ predicate on the "site_url" field.
func SiteURLEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldSiteURL, v))
}

// SiteURLNEQ applies the NEQ predicate on the "site_url" field.
func SiteURLNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldSiteURL, v))
}

// SiteURLIn applies the In predicate on the "site_url" field.
func SiteURLIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldSiteURL, vs...))
}

// SiteURLNotIn applies the NotIn predicate on the "site_url" field.
func SiteURLNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldSiteURL, vs...))
}

// SiteURLGT applies the GT predicate on the "site_url" field.
func SiteURLGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldSiteURL, v))
}

// SiteURLGTE applies the GTE predicate on the "site_url" field.
func SiteURLGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldSiteURL, v))
}

// SiteURLLT applies the LT predicate on the "site_url" field.
func SiteURLLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldSiteURL, v))
}

// SiteURLLTE applies the LTE predicate on the "site_url" field.
func SiteURLLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldSiteURL, v))
}

// SiteURLContains applies the Contains predicate on the "site_url" field.
func SiteURLContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldSiteURL, v))
}

// SiteURLHasPrefix applies the HasPrefix predicate on the "site_url" field.
func SiteURLHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldSiteURL, v))
}

// SiteURLHasSuffix applies the HasSuffix predicate on the "site_url" field.
func SiteURLHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldSiteURL, v))
}

// SiteURLEqualFold applies the EqualFold predicate on the "site_url" field.
func SiteURLEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldSiteURL, v))
}

// SiteURLContainsFold applies the ContainsFold predicate on the "site_url" field.
func SiteURLContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldSiteURL, v))
}

// GithubURLEQ applies the EQ predicate on the "github_url" field.
func GithubURLEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldGithubURL, v))
}

// GithubURLNEQ applies the NEQ predicate on the "github_url" field.
func GithubURLNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldGithubURL, v))
}

// GithubURLIn applies the In predicate on the "github_url" field.
func GithubURLIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldGithubURL, vs...))
}

// GithubURLNotIn applies the NotIn predicate on the "github_url" field.
func GithubURLNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldGithubURL, vs...))
}

// GithubURLGT applies the GT predicate on the "github_url" field.
func GithubURLGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldGithubURL, v))
}

// GithubURLGTE applies the GTE predicate on the "github_url" field.
func GithubURLGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldGithubURL, v))
}

// GithubURLLT applies the LT predicate on the "github_url" field.
func GithubURLLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldGithubURL, v))
}

// GithubURLLTE applies the LTE predicate on the "github_url" field.
func GithubURLLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldGithubURL, v))
}

// GithubURLContains applies the Contains predicate on the "github_url" field.
func GithubURLContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldGithubURL, v))
}

// GithubURLHasPrefix applies the HasPrefix predicate on the "github_url" field.
func GithubURLHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldGithubURL, v))
}

// GithubURLHasSuffix applies the HasSuffix predicate on the "github_url" field.
func GithubURLHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldGithubURL, v))
}

// GithubURLIsNil applies the IsNil predicate on the "github_url" field.
func GithubURLIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldGithubURL))
}

// GithubURLNotNil applies the NotNil predicate on the "github_url" field.
func GithubURLNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldGithubURL))
}

// GithubURLEqualFold applies the EqualFold predicate on the "github_url" field.
func GithubURLEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldGithubURL, v))
}

// GithubURLContainsFold applies the ContainsFold predicate on the "github_url" field.
func GithubURLContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldGithubURL, v))
}

// DevTimeEQ applies the EQ predicate on the "dev_time" field.
func DevTimeEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldDevTime, v))
}

// DevTimeNEQ applies the NEQ predicate on the "dev_time" field.
func DevTimeNEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldDevTime, v))
}

// DevTimeIn applies the In predicate on the "dev_time" field.
func DevTimeIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldDevTime, vs...))
}

// DevTimeNotIn applies the NotIn predicate on the "dev_time" field.
func DevTimeNotIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldDevTime, vs...))
}

// DevTimeGT applies the GT predicate on the "dev_time" field.
func DevTimeGT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldDevTime, v))
}

// DevTimeGTE applies the GTE predicate on the "dev_time" field.
func DevTimeGTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldDevTime, v))
}

// DevTimeLT applies the LT predicate on the "dev_time" field.
func DevTimeLT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldDevTime, v))
}

// DevTimeLTE applies the LTE predicate on the "dev_time" field.
func DevTimeLTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldDevTime, v))
}

// ThumbnailEQ applies the EQ predicate on the "thumbnail" field.
func ThumbnailEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldThumbnail, v))
}

// ThumbnailNEQ applies the NEQ predicate on the "thumbnail" field.
func ThumbnailNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldThumbnail, v))
}

// ThumbnailIn applies the In predicate on the "thumbnail" field.
func ThumbnailIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldThumbnail, vs...))
}

// ThumbnailNotIn applies the NotIn predicate on the "thumbnail" field.
func ThumbnailNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldThumbnail, vs...))
}

// ThumbnailGT applies the GT predicate on the "thumbnail" field.
func ThumbnailGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldThumbnail, v))
}

// ThumbnailGTE applies the GTE predicate on the "thumbnail" field.
func ThumbnailGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldThumbnail, v))
}

// ThumbnailLT applies the LT predicate on the "thumbnail" field.
func ThumbnailLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldThumbnail, v))
}

// ThumbnailLTE applies the LTE predicate on the "thumbnail" field.
func ThumbnailLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldThumbnail, v))
}

// ThumbnailContains applies the Contains predicate on the "thumbnail" field.
func ThumbnailContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldThumbnail, v))
}

// ThumbnailHasPrefix applies the HasPrefix predicate on the "thumbnail" field.
func ThumbnailHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldThumbnail, v))
}

// ThumbnailHasSuffix applies the HasSuffix predicate on the "thumbnail" field.
func ThumbnailHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldThumbnail, v))
}

// ThumbnailIsNil applies the IsNil predicate on the "thumbnail" field.
func ThumbnailIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldThumbnail))
}

// ThumbnailNotNil applies the NotNil predicate on the "thumbnail" field.
func ThumbnailNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldThumbnail))
}

// ThumbnailEqualFold applies the EqualFold predicate on the "thumbnail" field.
func ThumbnailEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldThumbnail, v))
}

// ThumbnailContainsFold applies the ContainsFold predicate on the "thumbnail" field.
func ThumbnailContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldThumbnail, v))
}

// CreatedEQ applies the EQ predicate on the "created" field.
func CreatedEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldCreated, v))
}

// CreatedNEQ applies the NEQ predicate on the "created" field.
func CreatedNEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldCreated, v))
}

// CreatedIn applies the In predicate on the "created" field.
func CreatedIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldCreated, vs...))
}

// CreatedNotIn applies the NotIn predicate on the "created" field.
func CreatedNotIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldCreated, vs...))
}

// CreatedGT applies the GT predicate on the "created" field.
func CreatedGT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldCreated, v))
}

// CreatedGTE applies the GTE predicate on the "created" field.
func CreatedGTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldCreated, v))
}

// CreatedLT applies the LT predicate on the "created" field.
func CreatedLT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldCreated, v))
}

// CreatedLTE applies the LTE predicate on the "created" field.
func CreatedLTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldCreated, v))
}

// ModifiedEQ applies the EQ predicate on the "modified" field.
func ModifiedEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldModified, v))
}

// ModifiedNEQ applies the NEQ predicate on the "modified" field.
func ModifiedNEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldModified, v))
}

// ModifiedIn applies the In predicate on the "modified" field.
func ModifiedIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldModified, vs...))
}

// ModifiedNotIn applies the NotIn predicate on the "modified" field.
func ModifiedNotIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldModified, vs...))
}

// ModifiedGT applies the GT predicate on the "modified" field.
func ModifiedGT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldModified, v))
}

// ModifiedGTE applies the GTE predicate on the "modified" field.
func ModifiedGTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldModified, v))
}

// ModifiedLT applies the LT predicate on the "modified" field.
func ModifiedLT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldModified, v))
}

// ModifiedLTE applies the LTE predicate on the "modified" field.
func ModifiedLTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldModified, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Product) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Product) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Product) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		p(s.Not())
	})
}
